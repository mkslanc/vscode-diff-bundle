{"version":3,"file":"bundle.vscode_diff.js","mappings":"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","sources":["webpack://vscode-diff-bundle/webpack/universalModuleDefinition","webpack://vscode-diff-bundle/webpack/bootstrap","webpack://vscode-diff-bundle/webpack/runtime/define property getters","webpack://vscode-diff-bundle/webpack/runtime/hasOwnProperty shorthand","webpack://vscode-diff-bundle/webpack/runtime/make namespace object","webpack://vscode-diff-bundle/./src/vs/base/common/errors.ts","webpack://vscode-diff-bundle/./src/vs/base/common/assert.ts","webpack://vscode-diff-bundle/./src/vs/base/common/charCode.ts","webpack://vscode-diff-bundle/./src/vs/editor/common/core/lineRange.ts","webpack://vscode-diff-bundle/./src/vs/editor/common/core/offsetRange.ts","webpack://vscode-diff-bundle/./src/vs/editor/common/core/position.ts","webpack://vscode-diff-bundle/./src/vs/editor/common/core/range.ts","webpack://vscode-diff-bundle/./src/vs/editor/common/diff/algorithms/diffAlgorithm.ts","webpack://vscode-diff-bundle/./src/vs/editor/common/diff/algorithms/utils.ts","webpack://vscode-diff-bundle/./src/vs/editor/common/diff/algorithms/dynamicProgrammingDiffing.ts","webpack://vscode-diff-bundle/./src/vs/editor/common/diff/algorithms/joinSequenceDiffs.ts","webpack://vscode-diff-bundle/./src/vs/editor/common/diff/algorithms/myersDiffAlgorithm.ts","webpack://vscode-diff-bundle/./src/vs/editor/common/diff/linesDiffComputer.ts","webpack://vscode-diff-bundle/./src/vs/editor/common/diff/standardLinesDiffComputer.ts","webpack://vscode-diff-bundle/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nexport interface ErrorListenerCallback {\r\n\t(error: any): void;\r\n}\r\n\r\nexport interface ErrorListenerUnbind {\r\n\t(): void;\r\n}\r\n\r\n// Avoid circular dependency on EventEmitter by implementing a subset of the interface.\r\nexport class ErrorHandler {\r\n\tprivate unexpectedErrorHandler: (e: any) => void;\r\n\tprivate listeners: ErrorListenerCallback[];\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.listeners = [];\r\n\r\n\t\tthis.unexpectedErrorHandler = function (e: any) {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tif (e.stack) {\r\n\t\t\t\t\tif (ErrorNoTelemetry.isErrorNoTelemetry(e)) {\r\n\t\t\t\t\t\tthrow new ErrorNoTelemetry(e.message + '\\n\\n' + e.stack);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthrow new Error(e.message + '\\n\\n' + e.stack);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthrow e;\r\n\t\t\t}, 0);\r\n\t\t};\r\n\t}\r\n\r\n\taddListener(listener: ErrorListenerCallback): ErrorListenerUnbind {\r\n\t\tthis.listeners.push(listener);\r\n\r\n\t\treturn () => {\r\n\t\t\tthis._removeListener(listener);\r\n\t\t};\r\n\t}\r\n\r\n\tprivate emit(e: any): void {\r\n\t\tthis.listeners.forEach((listener) => {\r\n\t\t\tlistener(e);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate _removeListener(listener: ErrorListenerCallback): void {\r\n\t\tthis.listeners.splice(this.listeners.indexOf(listener), 1);\r\n\t}\r\n\r\n\tsetUnexpectedErrorHandler(newUnexpectedErrorHandler: (e: any) => void): void {\r\n\t\tthis.unexpectedErrorHandler = newUnexpectedErrorHandler;\r\n\t}\r\n\r\n\tgetUnexpectedErrorHandler(): (e: any) => void {\r\n\t\treturn this.unexpectedErrorHandler;\r\n\t}\r\n\r\n\tonUnexpectedError(e: any): void {\r\n\t\tthis.unexpectedErrorHandler(e);\r\n\t\tthis.emit(e);\r\n\t}\r\n\r\n\t// For external errors, we don't want the listeners to be called\r\n\tonUnexpectedExternalError(e: any): void {\r\n\t\tthis.unexpectedErrorHandler(e);\r\n\t}\r\n}\r\n\r\nexport const errorHandler = new ErrorHandler();\r\n\r\nexport function setUnexpectedErrorHandler(newUnexpectedErrorHandler: (e: any) => void): void {\r\n\terrorHandler.setUnexpectedErrorHandler(newUnexpectedErrorHandler);\r\n}\r\n\r\n/**\r\n * Returns if the error is a SIGPIPE error. SIGPIPE errors should generally be\r\n * logged at most once, to avoid a loop.\r\n *\r\n * @see https://github.com/microsoft/vscode-remote-release/issues/6481\r\n */\r\nexport function isSigPipeError(e: unknown): e is Error {\r\n\tif (!e || typeof e !== 'object') {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst cast = e as Record<string, string | undefined>;\r\n\treturn cast.code === 'EPIPE' && cast.syscall?.toUpperCase() === 'WRITE';\r\n}\r\n\r\nexport function onUnexpectedError(e: any): undefined {\r\n\t// ignore errors from cancelled promises\r\n\tif (!isCancellationError(e)) {\r\n\t\terrorHandler.onUnexpectedError(e);\r\n\t}\r\n\treturn undefined;\r\n}\r\n\r\nexport function onUnexpectedExternalError(e: any): undefined {\r\n\t// ignore errors from cancelled promises\r\n\tif (!isCancellationError(e)) {\r\n\t\terrorHandler.onUnexpectedExternalError(e);\r\n\t}\r\n\treturn undefined;\r\n}\r\n\r\nexport interface SerializedError {\r\n\treadonly $isError: true;\r\n\treadonly name: string;\r\n\treadonly message: string;\r\n\treadonly stack: string;\r\n\treadonly noTelemetry: boolean;\r\n}\r\n\r\nexport function transformErrorForSerialization(error: Error): SerializedError;\r\nexport function transformErrorForSerialization(error: any): any;\r\nexport function transformErrorForSerialization(error: any): any {\r\n\tif (error instanceof Error) {\r\n\t\tconst { name, message } = error;\r\n\t\tconst stack: string = (<any>error).stacktrace || (<any>error).stack;\r\n\t\treturn {\r\n\t\t\t$isError: true,\r\n\t\t\tname,\r\n\t\t\tmessage,\r\n\t\t\tstack,\r\n\t\t\tnoTelemetry: ErrorNoTelemetry.isErrorNoTelemetry(error)\r\n\t\t};\r\n\t}\r\n\r\n\t// return as is\r\n\treturn error;\r\n}\r\n\r\n// see https://github.com/v8/v8/wiki/Stack%20Trace%20API#basic-stack-traces\r\nexport interface V8CallSite {\r\n\tgetThis(): unknown;\r\n\tgetTypeName(): string | null;\r\n\tgetFunction(): Function | undefined;\r\n\tgetFunctionName(): string | null;\r\n\tgetMethodName(): string | null;\r\n\tgetFileName(): string | null;\r\n\tgetLineNumber(): number | null;\r\n\tgetColumnNumber(): number | null;\r\n\tgetEvalOrigin(): string | undefined;\r\n\tisToplevel(): boolean;\r\n\tisEval(): boolean;\r\n\tisNative(): boolean;\r\n\tisConstructor(): boolean;\r\n\ttoString(): string;\r\n}\r\n\r\nconst canceledName = 'Canceled';\r\n\r\n/**\r\n * Checks if the given error is a promise in canceled state\r\n */\r\nexport function isCancellationError(error: any): boolean {\r\n\tif (error instanceof CancellationError) {\r\n\t\treturn true;\r\n\t}\r\n\treturn error instanceof Error && error.name === canceledName && error.message === canceledName;\r\n}\r\n\r\n// !!!IMPORTANT!!!\r\n// Do NOT change this class because it is also used as an API-type.\r\nexport class CancellationError extends Error {\r\n\tconstructor() {\r\n\t\tsuper(canceledName);\r\n\t\tthis.name = this.message;\r\n\t}\r\n}\r\n\r\n/**\r\n * @deprecated use {@link CancellationError `new CancellationError()`} instead\r\n */\r\nexport function canceled(): Error {\r\n\tconst error = new Error(canceledName);\r\n\terror.name = error.message;\r\n\treturn error;\r\n}\r\n\r\nexport function illegalArgument(name?: string): Error {\r\n\tif (name) {\r\n\t\treturn new Error(`Illegal argument: ${name}`);\r\n\t} else {\r\n\t\treturn new Error('Illegal argument');\r\n\t}\r\n}\r\n\r\nexport function illegalState(name?: string): Error {\r\n\tif (name) {\r\n\t\treturn new Error(`Illegal state: ${name}`);\r\n\t} else {\r\n\t\treturn new Error('Illegal state');\r\n\t}\r\n}\r\n\r\nexport function readonly(name?: string): Error {\r\n\treturn name\r\n\t\t? new Error(`readonly property '${name} cannot be changed'`)\r\n\t\t: new Error('readonly property cannot be changed');\r\n}\r\n\r\nexport function disposed(what: string): Error {\r\n\tconst result = new Error(`${what} has been disposed`);\r\n\tresult.name = 'DISPOSED';\r\n\treturn result;\r\n}\r\n\r\nexport function getErrorMessage(err: any): string {\r\n\tif (!err) {\r\n\t\treturn 'Error';\r\n\t}\r\n\r\n\tif (err.message) {\r\n\t\treturn err.message;\r\n\t}\r\n\r\n\tif (err.stack) {\r\n\t\treturn err.stack.split('\\n')[0];\r\n\t}\r\n\r\n\treturn String(err);\r\n}\r\n\r\nexport class NotImplementedError extends Error {\r\n\tconstructor(message?: string) {\r\n\t\tsuper('NotImplemented');\r\n\t\tif (message) {\r\n\t\t\tthis.message = message;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class NotSupportedError extends Error {\r\n\tconstructor(message?: string) {\r\n\t\tsuper('NotSupported');\r\n\t\tif (message) {\r\n\t\t\tthis.message = message;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class ExpectedError extends Error {\r\n\treadonly isExpected = true;\r\n}\r\n\r\n/**\r\n * Error that when thrown won't be logged in telemetry as an unhandled error.\r\n */\r\nexport class ErrorNoTelemetry extends Error {\r\n\toverride readonly name: string;\r\n\r\n\tconstructor(msg?: string) {\r\n\t\tsuper(msg);\r\n\t\tthis.name = 'CodeExpectedError';\r\n\t}\r\n\r\n\tpublic static fromError(err: Error): ErrorNoTelemetry {\r\n\t\tif (err instanceof ErrorNoTelemetry) {\r\n\t\t\treturn err;\r\n\t\t}\r\n\r\n\t\tconst result = new ErrorNoTelemetry();\r\n\t\tresult.message = err.message;\r\n\t\tresult.stack = err.stack;\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic static isErrorNoTelemetry(err: Error): err is ErrorNoTelemetry {\r\n\t\treturn err.name === 'CodeExpectedError';\r\n\t}\r\n}\r\n\r\n/**\r\n * This error indicates a bug.\r\n * Do not throw this for invalid user input.\r\n * Only catch this error to recover gracefully from bugs.\r\n */\r\nexport class BugIndicatingError extends Error {\r\n\tconstructor(message?: string) {\r\n\t\tsuper(message || 'An unexpected bug occurred.');\r\n\t\tObject.setPrototypeOf(this, BugIndicatingError.prototype);\r\n\r\n\t\t// Because we know for sure only buggy code throws this,\r\n\t\t// we definitely want to break here and fix the bug.\r\n\t\t// eslint-disable-next-line no-debugger\r\n\t\tdebugger;\r\n\t}\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport { BugIndicatingError, onUnexpectedError } from '../../../vs/base/common/errors';\r\n\r\n/**\r\n * Throws an error with the provided message if the provided value does not evaluate to a true Javascript value.\r\n *\r\n * @deprecated Use `assert(...)` instead.\r\n * This method is usually used like this:\r\n * ```ts\r\n * import * as assert from 'vs/base/common/assert';\r\n * assert.ok(...);\r\n * ```\r\n *\r\n * However, `assert` in that example is a user chosen name.\r\n * There is no tooling for generating such an import statement.\r\n * Thus, the `assert(...)` function should be used instead.\r\n */\r\nexport function ok(value?: unknown, message?: string) {\r\n\tif (!value) {\r\n\t\tthrow new Error(message ? `Assertion failed (${message})` : 'Assertion Failed');\r\n\t}\r\n}\r\n\r\nexport function assertNever(value: never, message = 'Unreachable'): never {\r\n\tthrow new Error(message);\r\n}\r\n\r\nexport function assert(condition: boolean): void {\r\n\tif (!condition) {\r\n\t\tthrow new BugIndicatingError('Assertion Failed');\r\n\t}\r\n}\r\n\r\n/**\r\n * condition must be side-effect free!\r\n */\r\nexport function assertFn(condition: () => boolean): void {\r\n\tif (!condition()) {\r\n\t\t// eslint-disable-next-line no-debugger\r\n\t\tdebugger;\r\n\t\t// Reevaluate `condition` again to make debugging easier\r\n\t\tcondition();\r\n\t\tonUnexpectedError(new BugIndicatingError('Assertion Failed'));\r\n\t}\r\n}\r\n\r\nexport function checkAdjacentItems<T>(items: readonly T[], predicate: (item1: T, item2: T) => boolean): boolean {\r\n\tlet i = 0;\r\n\twhile (i < items.length - 1) {\r\n\t\tconst a = items[i];\r\n\t\tconst b = items[i + 1];\r\n\t\tif (!predicate(a, b)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\ti++;\r\n\t}\r\n\treturn true;\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n// Names from https://blog.codinghorror.com/ascii-pronunciation-rules-for-programmers/\r\n\r\n/**\r\n * An inlined enum containing useful character codes (to be used with String.charCodeAt).\r\n * Please leave the const keyword such that it gets inlined when compiled to JavaScript!\r\n */\r\nexport const enum CharCode {\r\n\tNull = 0,\r\n\t/**\r\n\t * The `\\b` character.\r\n\t */\r\n\tBackspace = 8,\r\n\t/**\r\n\t * The `\\t` character.\r\n\t */\r\n\tTab = 9,\r\n\t/**\r\n\t * The `\\n` character.\r\n\t */\r\n\tLineFeed = 10,\r\n\t/**\r\n\t * The `\\r` character.\r\n\t */\r\n\tCarriageReturn = 13,\r\n\tSpace = 32,\r\n\t/**\r\n\t * The `!` character.\r\n\t */\r\n\tExclamationMark = 33,\r\n\t/**\r\n\t * The `\"` character.\r\n\t */\r\n\tDoubleQuote = 34,\r\n\t/**\r\n\t * The `#` character.\r\n\t */\r\n\tHash = 35,\r\n\t/**\r\n\t * The `$` character.\r\n\t */\r\n\tDollarSign = 36,\r\n\t/**\r\n\t * The `%` character.\r\n\t */\r\n\tPercentSign = 37,\r\n\t/**\r\n\t * The `&` character.\r\n\t */\r\n\tAmpersand = 38,\r\n\t/**\r\n\t * The `'` character.\r\n\t */\r\n\tSingleQuote = 39,\r\n\t/**\r\n\t * The `(` character.\r\n\t */\r\n\tOpenParen = 40,\r\n\t/**\r\n\t * The `)` character.\r\n\t */\r\n\tCloseParen = 41,\r\n\t/**\r\n\t * The `*` character.\r\n\t */\r\n\tAsterisk = 42,\r\n\t/**\r\n\t * The `+` character.\r\n\t */\r\n\tPlus = 43,\r\n\t/**\r\n\t * The `,` character.\r\n\t */\r\n\tComma = 44,\r\n\t/**\r\n\t * The `-` character.\r\n\t */\r\n\tDash = 45,\r\n\t/**\r\n\t * The `.` character.\r\n\t */\r\n\tPeriod = 46,\r\n\t/**\r\n\t * The `/` character.\r\n\t */\r\n\tSlash = 47,\r\n\r\n\tDigit0 = 48,\r\n\tDigit1 = 49,\r\n\tDigit2 = 50,\r\n\tDigit3 = 51,\r\n\tDigit4 = 52,\r\n\tDigit5 = 53,\r\n\tDigit6 = 54,\r\n\tDigit7 = 55,\r\n\tDigit8 = 56,\r\n\tDigit9 = 57,\r\n\r\n\t/**\r\n\t * The `:` character.\r\n\t */\r\n\tColon = 58,\r\n\t/**\r\n\t * The `;` character.\r\n\t */\r\n\tSemicolon = 59,\r\n\t/**\r\n\t * The `<` character.\r\n\t */\r\n\tLessThan = 60,\r\n\t/**\r\n\t * The `=` character.\r\n\t */\r\n\tEquals = 61,\r\n\t/**\r\n\t * The `>` character.\r\n\t */\r\n\tGreaterThan = 62,\r\n\t/**\r\n\t * The `?` character.\r\n\t */\r\n\tQuestionMark = 63,\r\n\t/**\r\n\t * The `@` character.\r\n\t */\r\n\tAtSign = 64,\r\n\r\n\tA = 65,\r\n\tB = 66,\r\n\tC = 67,\r\n\tD = 68,\r\n\tE = 69,\r\n\tF = 70,\r\n\tG = 71,\r\n\tH = 72,\r\n\tI = 73,\r\n\tJ = 74,\r\n\tK = 75,\r\n\tL = 76,\r\n\tM = 77,\r\n\tN = 78,\r\n\tO = 79,\r\n\tP = 80,\r\n\tQ = 81,\r\n\tR = 82,\r\n\tS = 83,\r\n\tT = 84,\r\n\tU = 85,\r\n\tV = 86,\r\n\tW = 87,\r\n\tX = 88,\r\n\tY = 89,\r\n\tZ = 90,\r\n\r\n\t/**\r\n\t * The `[` character.\r\n\t */\r\n\tOpenSquareBracket = 91,\r\n\t/**\r\n\t * The `\\` character.\r\n\t */\r\n\tBackslash = 92,\r\n\t/**\r\n\t * The `]` character.\r\n\t */\r\n\tCloseSquareBracket = 93,\r\n\t/**\r\n\t * The `^` character.\r\n\t */\r\n\tCaret = 94,\r\n\t/**\r\n\t * The `_` character.\r\n\t */\r\n\tUnderline = 95,\r\n\t/**\r\n\t * The ``(`)`` character.\r\n\t */\r\n\tBackTick = 96,\r\n\r\n\ta = 97,\r\n\tb = 98,\r\n\tc = 99,\r\n\td = 100,\r\n\te = 101,\r\n\tf = 102,\r\n\tg = 103,\r\n\th = 104,\r\n\ti = 105,\r\n\tj = 106,\r\n\tk = 107,\r\n\tl = 108,\r\n\tm = 109,\r\n\tn = 110,\r\n\to = 111,\r\n\tp = 112,\r\n\tq = 113,\r\n\tr = 114,\r\n\ts = 115,\r\n\tt = 116,\r\n\tu = 117,\r\n\tv = 118,\r\n\tw = 119,\r\n\tx = 120,\r\n\ty = 121,\r\n\tz = 122,\r\n\r\n\t/**\r\n\t * The `{` character.\r\n\t */\r\n\tOpenCurlyBrace = 123,\r\n\t/**\r\n\t * The `|` character.\r\n\t */\r\n\tPipe = 124,\r\n\t/**\r\n\t * The `}` character.\r\n\t */\r\n\tCloseCurlyBrace = 125,\r\n\t/**\r\n\t * The `~` character.\r\n\t */\r\n\tTilde = 126,\r\n\r\n\t/**\r\n\t * The &nbsp; (no-break space) character.\r\n\t * Unicode Character 'NO-BREAK SPACE' (U+00A0)\r\n\t */\r\n\tNoBreakSpace = 160,\r\n\r\n\tU_Combining_Grave_Accent = 0x0300,\t\t\t\t\t\t\t\t//\tU+0300\tCombining Grave Accent\r\n\tU_Combining_Acute_Accent = 0x0301,\t\t\t\t\t\t\t\t//\tU+0301\tCombining Acute Accent\r\n\tU_Combining_Circumflex_Accent = 0x0302,\t\t\t\t\t\t\t//\tU+0302\tCombining Circumflex Accent\r\n\tU_Combining_Tilde = 0x0303,\t\t\t\t\t\t\t\t\t\t//\tU+0303\tCombining Tilde\r\n\tU_Combining_Macron = 0x0304,\t\t\t\t\t\t\t\t\t//\tU+0304\tCombining Macron\r\n\tU_Combining_Overline = 0x0305,\t\t\t\t\t\t\t\t\t//\tU+0305\tCombining Overline\r\n\tU_Combining_Breve = 0x0306,\t\t\t\t\t\t\t\t\t\t//\tU+0306\tCombining Breve\r\n\tU_Combining_Dot_Above = 0x0307,\t\t\t\t\t\t\t\t\t//\tU+0307\tCombining Dot Above\r\n\tU_Combining_Diaeresis = 0x0308,\t\t\t\t\t\t\t\t\t//\tU+0308\tCombining Diaeresis\r\n\tU_Combining_Hook_Above = 0x0309,\t\t\t\t\t\t\t\t//\tU+0309\tCombining Hook Above\r\n\tU_Combining_Ring_Above = 0x030A,\t\t\t\t\t\t\t\t//\tU+030A\tCombining Ring Above\r\n\tU_Combining_Double_Acute_Accent = 0x030B,\t\t\t\t\t\t//\tU+030B\tCombining Double Acute Accent\r\n\tU_Combining_Caron = 0x030C,\t\t\t\t\t\t\t\t\t\t//\tU+030C\tCombining Caron\r\n\tU_Combining_Vertical_Line_Above = 0x030D,\t\t\t\t\t\t//\tU+030D\tCombining Vertical Line Above\r\n\tU_Combining_Double_Vertical_Line_Above = 0x030E,\t\t\t\t//\tU+030E\tCombining Double Vertical Line Above\r\n\tU_Combining_Double_Grave_Accent = 0x030F,\t\t\t\t\t\t//\tU+030F\tCombining Double Grave Accent\r\n\tU_Combining_Candrabindu = 0x0310,\t\t\t\t\t\t\t\t//\tU+0310\tCombining Candrabindu\r\n\tU_Combining_Inverted_Breve = 0x0311,\t\t\t\t\t\t\t//\tU+0311\tCombining Inverted Breve\r\n\tU_Combining_Turned_Comma_Above = 0x0312,\t\t\t\t\t\t//\tU+0312\tCombining Turned Comma Above\r\n\tU_Combining_Comma_Above = 0x0313,\t\t\t\t\t\t\t\t//\tU+0313\tCombining Comma Above\r\n\tU_Combining_Reversed_Comma_Above = 0x0314,\t\t\t\t\t\t//\tU+0314\tCombining Reversed Comma Above\r\n\tU_Combining_Comma_Above_Right = 0x0315,\t\t\t\t\t\t\t//\tU+0315\tCombining Comma Above Right\r\n\tU_Combining_Grave_Accent_Below = 0x0316,\t\t\t\t\t\t//\tU+0316\tCombining Grave Accent Below\r\n\tU_Combining_Acute_Accent_Below = 0x0317,\t\t\t\t\t\t//\tU+0317\tCombining Acute Accent Below\r\n\tU_Combining_Left_Tack_Below = 0x0318,\t\t\t\t\t\t\t//\tU+0318\tCombining Left Tack Below\r\n\tU_Combining_Right_Tack_Below = 0x0319,\t\t\t\t\t\t\t//\tU+0319\tCombining Right Tack Below\r\n\tU_Combining_Left_Angle_Above = 0x031A,\t\t\t\t\t\t\t//\tU+031A\tCombining Left Angle Above\r\n\tU_Combining_Horn = 0x031B,\t\t\t\t\t\t\t\t\t\t//\tU+031B\tCombining Horn\r\n\tU_Combining_Left_Half_Ring_Below = 0x031C,\t\t\t\t\t\t//\tU+031C\tCombining Left Half Ring Below\r\n\tU_Combining_Up_Tack_Below = 0x031D,\t\t\t\t\t\t\t\t//\tU+031D\tCombining Up Tack Below\r\n\tU_Combining_Down_Tack_Below = 0x031E,\t\t\t\t\t\t\t//\tU+031E\tCombining Down Tack Below\r\n\tU_Combining_Plus_Sign_Below = 0x031F,\t\t\t\t\t\t\t//\tU+031F\tCombining Plus Sign Below\r\n\tU_Combining_Minus_Sign_Below = 0x0320,\t\t\t\t\t\t\t//\tU+0320\tCombining Minus Sign Below\r\n\tU_Combining_Palatalized_Hook_Below = 0x0321,\t\t\t\t\t//\tU+0321\tCombining Palatalized Hook Below\r\n\tU_Combining_Retroflex_Hook_Below = 0x0322,\t\t\t\t\t\t//\tU+0322\tCombining Retroflex Hook Below\r\n\tU_Combining_Dot_Below = 0x0323,\t\t\t\t\t\t\t\t\t//\tU+0323\tCombining Dot Below\r\n\tU_Combining_Diaeresis_Below = 0x0324,\t\t\t\t\t\t\t//\tU+0324\tCombining Diaeresis Below\r\n\tU_Combining_Ring_Below = 0x0325,\t\t\t\t\t\t\t\t//\tU+0325\tCombining Ring Below\r\n\tU_Combining_Comma_Below = 0x0326,\t\t\t\t\t\t\t\t//\tU+0326\tCombining Comma Below\r\n\tU_Combining_Cedilla = 0x0327,\t\t\t\t\t\t\t\t\t//\tU+0327\tCombining Cedilla\r\n\tU_Combining_Ogonek = 0x0328,\t\t\t\t\t\t\t\t\t//\tU+0328\tCombining Ogonek\r\n\tU_Combining_Vertical_Line_Below = 0x0329,\t\t\t\t\t\t//\tU+0329\tCombining Vertical Line Below\r\n\tU_Combining_Bridge_Below = 0x032A,\t\t\t\t\t\t\t\t//\tU+032A\tCombining Bridge Below\r\n\tU_Combining_Inverted_Double_Arch_Below = 0x032B,\t\t\t\t//\tU+032B\tCombining Inverted Double Arch Below\r\n\tU_Combining_Caron_Below = 0x032C,\t\t\t\t\t\t\t\t//\tU+032C\tCombining Caron Below\r\n\tU_Combining_Circumflex_Accent_Below = 0x032D,\t\t\t\t\t//\tU+032D\tCombining Circumflex Accent Below\r\n\tU_Combining_Breve_Below = 0x032E,\t\t\t\t\t\t\t\t//\tU+032E\tCombining Breve Below\r\n\tU_Combining_Inverted_Breve_Below = 0x032F,\t\t\t\t\t\t//\tU+032F\tCombining Inverted Breve Below\r\n\tU_Combining_Tilde_Below = 0x0330,\t\t\t\t\t\t\t\t//\tU+0330\tCombining Tilde Below\r\n\tU_Combining_Macron_Below = 0x0331,\t\t\t\t\t\t\t\t//\tU+0331\tCombining Macron Below\r\n\tU_Combining_Low_Line = 0x0332,\t\t\t\t\t\t\t\t\t//\tU+0332\tCombining Low Line\r\n\tU_Combining_Double_Low_Line = 0x0333,\t\t\t\t\t\t\t//\tU+0333\tCombining Double Low Line\r\n\tU_Combining_Tilde_Overlay = 0x0334,\t\t\t\t\t\t\t\t//\tU+0334\tCombining Tilde Overlay\r\n\tU_Combining_Short_Stroke_Overlay = 0x0335,\t\t\t\t\t\t//\tU+0335\tCombining Short Stroke Overlay\r\n\tU_Combining_Long_Stroke_Overlay = 0x0336,\t\t\t\t\t\t//\tU+0336\tCombining Long Stroke Overlay\r\n\tU_Combining_Short_Solidus_Overlay = 0x0337,\t\t\t\t\t\t//\tU+0337\tCombining Short Solidus Overlay\r\n\tU_Combining_Long_Solidus_Overlay = 0x0338,\t\t\t\t\t\t//\tU+0338\tCombining Long Solidus Overlay\r\n\tU_Combining_Right_Half_Ring_Below = 0x0339,\t\t\t\t\t\t//\tU+0339\tCombining Right Half Ring Below\r\n\tU_Combining_Inverted_Bridge_Below = 0x033A,\t\t\t\t\t\t//\tU+033A\tCombining Inverted Bridge Below\r\n\tU_Combining_Square_Below = 0x033B,\t\t\t\t\t\t\t\t//\tU+033B\tCombining Square Below\r\n\tU_Combining_Seagull_Below = 0x033C,\t\t\t\t\t\t\t\t//\tU+033C\tCombining Seagull Below\r\n\tU_Combining_X_Above = 0x033D,\t\t\t\t\t\t\t\t\t//\tU+033D\tCombining X Above\r\n\tU_Combining_Vertical_Tilde = 0x033E,\t\t\t\t\t\t\t//\tU+033E\tCombining Vertical Tilde\r\n\tU_Combining_Double_Overline = 0x033F,\t\t\t\t\t\t\t//\tU+033F\tCombining Double Overline\r\n\tU_Combining_Grave_Tone_Mark = 0x0340,\t\t\t\t\t\t\t//\tU+0340\tCombining Grave Tone Mark\r\n\tU_Combining_Acute_Tone_Mark = 0x0341,\t\t\t\t\t\t\t//\tU+0341\tCombining Acute Tone Mark\r\n\tU_Combining_Greek_Perispomeni = 0x0342,\t\t\t\t\t\t\t//\tU+0342\tCombining Greek Perispomeni\r\n\tU_Combining_Greek_Koronis = 0x0343,\t\t\t\t\t\t\t\t//\tU+0343\tCombining Greek Koronis\r\n\tU_Combining_Greek_Dialytika_Tonos = 0x0344,\t\t\t\t\t\t//\tU+0344\tCombining Greek Dialytika Tonos\r\n\tU_Combining_Greek_Ypogegrammeni = 0x0345,\t\t\t\t\t\t//\tU+0345\tCombining Greek Ypogegrammeni\r\n\tU_Combining_Bridge_Above = 0x0346,\t\t\t\t\t\t\t\t//\tU+0346\tCombining Bridge Above\r\n\tU_Combining_Equals_Sign_Below = 0x0347,\t\t\t\t\t\t\t//\tU+0347\tCombining Equals Sign Below\r\n\tU_Combining_Double_Vertical_Line_Below = 0x0348,\t\t\t\t//\tU+0348\tCombining Double Vertical Line Below\r\n\tU_Combining_Left_Angle_Below = 0x0349,\t\t\t\t\t\t\t//\tU+0349\tCombining Left Angle Below\r\n\tU_Combining_Not_Tilde_Above = 0x034A,\t\t\t\t\t\t\t//\tU+034A\tCombining Not Tilde Above\r\n\tU_Combining_Homothetic_Above = 0x034B,\t\t\t\t\t\t\t//\tU+034B\tCombining Homothetic Above\r\n\tU_Combining_Almost_Equal_To_Above = 0x034C,\t\t\t\t\t\t//\tU+034C\tCombining Almost Equal To Above\r\n\tU_Combining_Left_Right_Arrow_Below = 0x034D,\t\t\t\t\t//\tU+034D\tCombining Left Right Arrow Below\r\n\tU_Combining_Upwards_Arrow_Below = 0x034E,\t\t\t\t\t\t//\tU+034E\tCombining Upwards Arrow Below\r\n\tU_Combining_Grapheme_Joiner = 0x034F,\t\t\t\t\t\t\t//\tU+034F\tCombining Grapheme Joiner\r\n\tU_Combining_Right_Arrowhead_Above = 0x0350,\t\t\t\t\t\t//\tU+0350\tCombining Right Arrowhead Above\r\n\tU_Combining_Left_Half_Ring_Above = 0x0351,\t\t\t\t\t\t//\tU+0351\tCombining Left Half Ring Above\r\n\tU_Combining_Fermata = 0x0352,\t\t\t\t\t\t\t\t\t//\tU+0352\tCombining Fermata\r\n\tU_Combining_X_Below = 0x0353,\t\t\t\t\t\t\t\t\t//\tU+0353\tCombining X Below\r\n\tU_Combining_Left_Arrowhead_Below = 0x0354,\t\t\t\t\t\t//\tU+0354\tCombining Left Arrowhead Below\r\n\tU_Combining_Right_Arrowhead_Below = 0x0355,\t\t\t\t\t\t//\tU+0355\tCombining Right Arrowhead Below\r\n\tU_Combining_Right_Arrowhead_And_Up_Arrowhead_Below = 0x0356,\t//\tU+0356\tCombining Right Arrowhead And Up Arrowhead Below\r\n\tU_Combining_Right_Half_Ring_Above = 0x0357,\t\t\t\t\t\t//\tU+0357\tCombining Right Half Ring Above\r\n\tU_Combining_Dot_Above_Right = 0x0358,\t\t\t\t\t\t\t//\tU+0358\tCombining Dot Above Right\r\n\tU_Combining_Asterisk_Below = 0x0359,\t\t\t\t\t\t\t//\tU+0359\tCombining Asterisk Below\r\n\tU_Combining_Double_Ring_Below = 0x035A,\t\t\t\t\t\t\t//\tU+035A\tCombining Double Ring Below\r\n\tU_Combining_Zigzag_Above = 0x035B,\t\t\t\t\t\t\t\t//\tU+035B\tCombining Zigzag Above\r\n\tU_Combining_Double_Breve_Below = 0x035C,\t\t\t\t\t\t//\tU+035C\tCombining Double Breve Below\r\n\tU_Combining_Double_Breve = 0x035D,\t\t\t\t\t\t\t\t//\tU+035D\tCombining Double Breve\r\n\tU_Combining_Double_Macron = 0x035E,\t\t\t\t\t\t\t\t//\tU+035E\tCombining Double Macron\r\n\tU_Combining_Double_Macron_Below = 0x035F,\t\t\t\t\t\t//\tU+035F\tCombining Double Macron Below\r\n\tU_Combining_Double_Tilde = 0x0360,\t\t\t\t\t\t\t\t//\tU+0360\tCombining Double Tilde\r\n\tU_Combining_Double_Inverted_Breve = 0x0361,\t\t\t\t\t\t//\tU+0361\tCombining Double Inverted Breve\r\n\tU_Combining_Double_Rightwards_Arrow_Below = 0x0362,\t\t\t\t//\tU+0362\tCombining Double Rightwards Arrow Below\r\n\tU_Combining_Latin_Small_Letter_A = 0x0363, \t\t\t\t\t\t//\tU+0363\tCombining Latin Small Letter A\r\n\tU_Combining_Latin_Small_Letter_E = 0x0364, \t\t\t\t\t\t//\tU+0364\tCombining Latin Small Letter E\r\n\tU_Combining_Latin_Small_Letter_I = 0x0365, \t\t\t\t\t\t//\tU+0365\tCombining Latin Small Letter I\r\n\tU_Combining_Latin_Small_Letter_O = 0x0366, \t\t\t\t\t\t//\tU+0366\tCombining Latin Small Letter O\r\n\tU_Combining_Latin_Small_Letter_U = 0x0367, \t\t\t\t\t\t//\tU+0367\tCombining Latin Small Letter U\r\n\tU_Combining_Latin_Small_Letter_C = 0x0368, \t\t\t\t\t\t//\tU+0368\tCombining Latin Small Letter C\r\n\tU_Combining_Latin_Small_Letter_D = 0x0369, \t\t\t\t\t\t//\tU+0369\tCombining Latin Small Letter D\r\n\tU_Combining_Latin_Small_Letter_H = 0x036A, \t\t\t\t\t\t//\tU+036A\tCombining Latin Small Letter H\r\n\tU_Combining_Latin_Small_Letter_M = 0x036B, \t\t\t\t\t\t//\tU+036B\tCombining Latin Small Letter M\r\n\tU_Combining_Latin_Small_Letter_R = 0x036C, \t\t\t\t\t\t//\tU+036C\tCombining Latin Small Letter R\r\n\tU_Combining_Latin_Small_Letter_T = 0x036D, \t\t\t\t\t\t//\tU+036D\tCombining Latin Small Letter T\r\n\tU_Combining_Latin_Small_Letter_V = 0x036E, \t\t\t\t\t\t//\tU+036E\tCombining Latin Small Letter V\r\n\tU_Combining_Latin_Small_Letter_X = 0x036F, \t\t\t\t\t\t//\tU+036F\tCombining Latin Small Letter X\r\n\r\n\t/**\r\n\t * Unicode Character 'LINE SEPARATOR' (U+2028)\r\n\t * http://www.fileformat.info/info/unicode/char/2028/index.htm\r\n\t */\r\n\tLINE_SEPARATOR = 0x2028,\r\n\t/**\r\n\t * Unicode Character 'PARAGRAPH SEPARATOR' (U+2029)\r\n\t * http://www.fileformat.info/info/unicode/char/2029/index.htm\r\n\t */\r\n\tPARAGRAPH_SEPARATOR = 0x2029,\r\n\t/**\r\n\t * Unicode Character 'NEXT LINE' (U+0085)\r\n\t * http://www.fileformat.info/info/unicode/char/0085/index.htm\r\n\t */\r\n\tNEXT_LINE = 0x0085,\r\n\r\n\t// http://www.fileformat.info/info/unicode/category/Sk/list.htm\r\n\tU_CIRCUMFLEX = 0x005E,\t\t\t\t\t\t\t\t\t// U+005E\tCIRCUMFLEX\r\n\tU_GRAVE_ACCENT = 0x0060,\t\t\t\t\t\t\t\t// U+0060\tGRAVE ACCENT\r\n\tU_DIAERESIS = 0x00A8,\t\t\t\t\t\t\t\t\t// U+00A8\tDIAERESIS\r\n\tU_MACRON = 0x00AF,\t\t\t\t\t\t\t\t\t\t// U+00AF\tMACRON\r\n\tU_ACUTE_ACCENT = 0x00B4,\t\t\t\t\t\t\t\t// U+00B4\tACUTE ACCENT\r\n\tU_CEDILLA = 0x00B8,\t\t\t\t\t\t\t\t\t\t// U+00B8\tCEDILLA\r\n\tU_MODIFIER_LETTER_LEFT_ARROWHEAD = 0x02C2,\t\t\t\t// U+02C2\tMODIFIER LETTER LEFT ARROWHEAD\r\n\tU_MODIFIER_LETTER_RIGHT_ARROWHEAD = 0x02C3,\t\t\t\t// U+02C3\tMODIFIER LETTER RIGHT ARROWHEAD\r\n\tU_MODIFIER_LETTER_UP_ARROWHEAD = 0x02C4,\t\t\t\t// U+02C4\tMODIFIER LETTER UP ARROWHEAD\r\n\tU_MODIFIER_LETTER_DOWN_ARROWHEAD = 0x02C5,\t\t\t\t// U+02C5\tMODIFIER LETTER DOWN ARROWHEAD\r\n\tU_MODIFIER_LETTER_CENTRED_RIGHT_HALF_RING = 0x02D2,\t\t// U+02D2\tMODIFIER LETTER CENTRED RIGHT HALF RING\r\n\tU_MODIFIER_LETTER_CENTRED_LEFT_HALF_RING = 0x02D3,\t\t// U+02D3\tMODIFIER LETTER CENTRED LEFT HALF RING\r\n\tU_MODIFIER_LETTER_UP_TACK = 0x02D4,\t\t\t\t\t\t// U+02D4\tMODIFIER LETTER UP TACK\r\n\tU_MODIFIER_LETTER_DOWN_TACK = 0x02D5,\t\t\t\t\t// U+02D5\tMODIFIER LETTER DOWN TACK\r\n\tU_MODIFIER_LETTER_PLUS_SIGN = 0x02D6,\t\t\t\t\t// U+02D6\tMODIFIER LETTER PLUS SIGN\r\n\tU_MODIFIER_LETTER_MINUS_SIGN = 0x02D7,\t\t\t\t\t// U+02D7\tMODIFIER LETTER MINUS SIGN\r\n\tU_BREVE = 0x02D8,\t\t\t\t\t\t\t\t\t\t// U+02D8\tBREVE\r\n\tU_DOT_ABOVE = 0x02D9,\t\t\t\t\t\t\t\t\t// U+02D9\tDOT ABOVE\r\n\tU_RING_ABOVE = 0x02DA,\t\t\t\t\t\t\t\t\t// U+02DA\tRING ABOVE\r\n\tU_OGONEK = 0x02DB,\t\t\t\t\t\t\t\t\t\t// U+02DB\tOGONEK\r\n\tU_SMALL_TILDE = 0x02DC,\t\t\t\t\t\t\t\t\t// U+02DC\tSMALL TILDE\r\n\tU_DOUBLE_ACUTE_ACCENT = 0x02DD,\t\t\t\t\t\t\t// U+02DD\tDOUBLE ACUTE ACCENT\r\n\tU_MODIFIER_LETTER_RHOTIC_HOOK = 0x02DE,\t\t\t\t\t// U+02DE\tMODIFIER LETTER RHOTIC HOOK\r\n\tU_MODIFIER_LETTER_CROSS_ACCENT = 0x02DF,\t\t\t\t// U+02DF\tMODIFIER LETTER CROSS ACCENT\r\n\tU_MODIFIER_LETTER_EXTRA_HIGH_TONE_BAR = 0x02E5,\t\t\t// U+02E5\tMODIFIER LETTER EXTRA-HIGH TONE BAR\r\n\tU_MODIFIER_LETTER_HIGH_TONE_BAR = 0x02E6,\t\t\t\t// U+02E6\tMODIFIER LETTER HIGH TONE BAR\r\n\tU_MODIFIER_LETTER_MID_TONE_BAR = 0x02E7,\t\t\t\t// U+02E7\tMODIFIER LETTER MID TONE BAR\r\n\tU_MODIFIER_LETTER_LOW_TONE_BAR = 0x02E8,\t\t\t\t// U+02E8\tMODIFIER LETTER LOW TONE BAR\r\n\tU_MODIFIER_LETTER_EXTRA_LOW_TONE_BAR = 0x02E9,\t\t\t// U+02E9\tMODIFIER LETTER EXTRA-LOW TONE BAR\r\n\tU_MODIFIER_LETTER_YIN_DEPARTING_TONE_MARK = 0x02EA,\t\t// U+02EA\tMODIFIER LETTER YIN DEPARTING TONE MARK\r\n\tU_MODIFIER_LETTER_YANG_DEPARTING_TONE_MARK = 0x02EB,\t// U+02EB\tMODIFIER LETTER YANG DEPARTING TONE MARK\r\n\tU_MODIFIER_LETTER_UNASPIRATED = 0x02ED,\t\t\t\t\t// U+02ED\tMODIFIER LETTER UNASPIRATED\r\n\tU_MODIFIER_LETTER_LOW_DOWN_ARROWHEAD = 0x02EF,\t\t\t// U+02EF\tMODIFIER LETTER LOW DOWN ARROWHEAD\r\n\tU_MODIFIER_LETTER_LOW_UP_ARROWHEAD = 0x02F0,\t\t\t// U+02F0\tMODIFIER LETTER LOW UP ARROWHEAD\r\n\tU_MODIFIER_LETTER_LOW_LEFT_ARROWHEAD = 0x02F1,\t\t\t// U+02F1\tMODIFIER LETTER LOW LEFT ARROWHEAD\r\n\tU_MODIFIER_LETTER_LOW_RIGHT_ARROWHEAD = 0x02F2,\t\t\t// U+02F2\tMODIFIER LETTER LOW RIGHT ARROWHEAD\r\n\tU_MODIFIER_LETTER_LOW_RING = 0x02F3,\t\t\t\t\t// U+02F3\tMODIFIER LETTER LOW RING\r\n\tU_MODIFIER_LETTER_MIDDLE_GRAVE_ACCENT = 0x02F4,\t\t\t// U+02F4\tMODIFIER LETTER MIDDLE GRAVE ACCENT\r\n\tU_MODIFIER_LETTER_MIDDLE_DOUBLE_GRAVE_ACCENT = 0x02F5,\t// U+02F5\tMODIFIER LETTER MIDDLE DOUBLE GRAVE ACCENT\r\n\tU_MODIFIER_LETTER_MIDDLE_DOUBLE_ACUTE_ACCENT = 0x02F6,\t// U+02F6\tMODIFIER LETTER MIDDLE DOUBLE ACUTE ACCENT\r\n\tU_MODIFIER_LETTER_LOW_TILDE = 0x02F7,\t\t\t\t\t// U+02F7\tMODIFIER LETTER LOW TILDE\r\n\tU_MODIFIER_LETTER_RAISED_COLON = 0x02F8,\t\t\t\t// U+02F8\tMODIFIER LETTER RAISED COLON\r\n\tU_MODIFIER_LETTER_BEGIN_HIGH_TONE = 0x02F9,\t\t\t\t// U+02F9\tMODIFIER LETTER BEGIN HIGH TONE\r\n\tU_MODIFIER_LETTER_END_HIGH_TONE = 0x02FA,\t\t\t\t// U+02FA\tMODIFIER LETTER END HIGH TONE\r\n\tU_MODIFIER_LETTER_BEGIN_LOW_TONE = 0x02FB,\t\t\t\t// U+02FB\tMODIFIER LETTER BEGIN LOW TONE\r\n\tU_MODIFIER_LETTER_END_LOW_TONE = 0x02FC,\t\t\t\t// U+02FC\tMODIFIER LETTER END LOW TONE\r\n\tU_MODIFIER_LETTER_SHELF = 0x02FD,\t\t\t\t\t\t// U+02FD\tMODIFIER LETTER SHELF\r\n\tU_MODIFIER_LETTER_OPEN_SHELF = 0x02FE,\t\t\t\t\t// U+02FE\tMODIFIER LETTER OPEN SHELF\r\n\tU_MODIFIER_LETTER_LOW_LEFT_ARROW = 0x02FF,\t\t\t\t// U+02FF\tMODIFIER LETTER LOW LEFT ARROW\r\n\tU_GREEK_LOWER_NUMERAL_SIGN = 0x0375,\t\t\t\t\t// U+0375\tGREEK LOWER NUMERAL SIGN\r\n\tU_GREEK_TONOS = 0x0384,\t\t\t\t\t\t\t\t\t// U+0384\tGREEK TONOS\r\n\tU_GREEK_DIALYTIKA_TONOS = 0x0385,\t\t\t\t\t\t// U+0385\tGREEK DIALYTIKA TONOS\r\n\tU_GREEK_KORONIS = 0x1FBD,\t\t\t\t\t\t\t\t// U+1FBD\tGREEK KORONIS\r\n\tU_GREEK_PSILI = 0x1FBF,\t\t\t\t\t\t\t\t\t// U+1FBF\tGREEK PSILI\r\n\tU_GREEK_PERISPOMENI = 0x1FC0,\t\t\t\t\t\t\t// U+1FC0\tGREEK PERISPOMENI\r\n\tU_GREEK_DIALYTIKA_AND_PERISPOMENI = 0x1FC1,\t\t\t\t// U+1FC1\tGREEK DIALYTIKA AND PERISPOMENI\r\n\tU_GREEK_PSILI_AND_VARIA = 0x1FCD,\t\t\t\t\t\t// U+1FCD\tGREEK PSILI AND VARIA\r\n\tU_GREEK_PSILI_AND_OXIA = 0x1FCE,\t\t\t\t\t\t// U+1FCE\tGREEK PSILI AND OXIA\r\n\tU_GREEK_PSILI_AND_PERISPOMENI = 0x1FCF,\t\t\t\t\t// U+1FCF\tGREEK PSILI AND PERISPOMENI\r\n\tU_GREEK_DASIA_AND_VARIA = 0x1FDD,\t\t\t\t\t\t// U+1FDD\tGREEK DASIA AND VARIA\r\n\tU_GREEK_DASIA_AND_OXIA = 0x1FDE,\t\t\t\t\t\t// U+1FDE\tGREEK DASIA AND OXIA\r\n\tU_GREEK_DASIA_AND_PERISPOMENI = 0x1FDF,\t\t\t\t\t// U+1FDF\tGREEK DASIA AND PERISPOMENI\r\n\tU_GREEK_DIALYTIKA_AND_VARIA = 0x1FED,\t\t\t\t\t// U+1FED\tGREEK DIALYTIKA AND VARIA\r\n\tU_GREEK_DIALYTIKA_AND_OXIA = 0x1FEE,\t\t\t\t\t// U+1FEE\tGREEK DIALYTIKA AND OXIA\r\n\tU_GREEK_VARIA = 0x1FEF,\t\t\t\t\t\t\t\t\t// U+1FEF\tGREEK VARIA\r\n\tU_GREEK_OXIA = 0x1FFD,\t\t\t\t\t\t\t\t\t// U+1FFD\tGREEK OXIA\r\n\tU_GREEK_DASIA = 0x1FFE,\t\t\t\t\t\t\t\t\t// U+1FFE\tGREEK DASIA\r\n\r\n\tU_IDEOGRAPHIC_FULL_STOP = 0x3002,\t\t\t\t\t\t// U+3002\tIDEOGRAPHIC FULL STOP\r\n\tU_LEFT_CORNER_BRACKET = 0x300C,\t\t\t\t\t\t\t// U+300C\tLEFT CORNER BRACKET\r\n\tU_RIGHT_CORNER_BRACKET = 0x300D,\t\t\t\t\t\t// U+300D\tRIGHT CORNER BRACKET\r\n\tU_LEFT_BLACK_LENTICULAR_BRACKET = 0x3010,\t\t\t\t// U+3010\tLEFT BLACK LENTICULAR BRACKET\r\n\tU_RIGHT_BLACK_LENTICULAR_BRACKET = 0x3011,\t\t\t\t// U+3011\tRIGHT BLACK LENTICULAR BRACKET\r\n\r\n\r\n\tU_OVERLINE = 0x203E, // Unicode Character 'OVERLINE'\r\n\r\n\t/**\r\n\t * UTF-8 BOM\r\n\t * Unicode Character 'ZERO WIDTH NO-BREAK SPACE' (U+FEFF)\r\n\t * http://www.fileformat.info/info/unicode/char/feff/index.htm\r\n\t */\r\n\tUTF8_BOM = 65279,\r\n\r\n\tU_FULLWIDTH_SEMICOLON = 0xFF1B,\t\t\t\t\t\t\t// U+FF1B\tFULLWIDTH SEMICOLON\r\n\tU_FULLWIDTH_COMMA = 0xFF0C,\t\t\t\t\t\t\t\t// U+FF0C\tFULLWIDTH COMMA\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport { BugIndicatingError } from '../../../../vs/base/common/errors';\r\n\r\n/**\r\n * A range of lines (1-based).\r\n */\r\nexport class LineRange {\r\n\t/**\r\n\t * @param lineRanges An array of sorted line ranges.\r\n\t */\r\n\tpublic static joinMany(lineRanges: readonly (readonly LineRange[])[]): readonly LineRange[] {\r\n\t\tif (lineRanges.length === 0) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\t\tlet result = lineRanges[0];\r\n\t\tfor (let i = 1; i < lineRanges.length; i++) {\r\n\t\t\tresult = this.join(result, lineRanges[i]);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * @param lineRanges1 Must be sorted.\r\n\t * @param lineRanges2 Must be sorted.\r\n\t */\r\n\tpublic static join(lineRanges1: readonly LineRange[], lineRanges2: readonly LineRange[]): readonly LineRange[] {\r\n\t\tif (lineRanges1.length === 0) {\r\n\t\t\treturn lineRanges2;\r\n\t\t}\r\n\t\tif (lineRanges2.length === 0) {\r\n\t\t\treturn lineRanges1;\r\n\t\t}\r\n\r\n\t\tconst result: LineRange[] = [];\r\n\t\tlet i1 = 0;\r\n\t\tlet i2 = 0;\r\n\t\tlet current: LineRange | null = null;\r\n\t\twhile (i1 < lineRanges1.length || i2 < lineRanges2.length) {\r\n\t\t\tlet next: LineRange | null = null;\r\n\t\t\tif (i1 < lineRanges1.length && i2 < lineRanges2.length) {\r\n\t\t\t\tconst lineRange1 = lineRanges1[i1];\r\n\t\t\t\tconst lineRange2 = lineRanges2[i2];\r\n\t\t\t\tif (lineRange1.startLineNumber < lineRange2.startLineNumber) {\r\n\t\t\t\t\tnext = lineRange1;\r\n\t\t\t\t\ti1++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnext = lineRange2;\r\n\t\t\t\t\ti2++;\r\n\t\t\t\t}\r\n\t\t\t} else if (i1 < lineRanges1.length) {\r\n\t\t\t\tnext = lineRanges1[i1];\r\n\t\t\t\ti1++;\r\n\t\t\t} else {\r\n\t\t\t\tnext = lineRanges2[i2];\r\n\t\t\t\ti2++;\r\n\t\t\t}\r\n\r\n\t\t\tif (current === null) {\r\n\t\t\t\tcurrent = next;\r\n\t\t\t} else {\r\n\t\t\t\tif (current.endLineNumberExclusive >= next.startLineNumber) {\r\n\t\t\t\t\t// merge\r\n\t\t\t\t\tcurrent = new LineRange(current.startLineNumber, Math.max(current.endLineNumberExclusive, next.endLineNumberExclusive));\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// push\r\n\t\t\t\t\tresult.push(current);\r\n\t\t\t\t\tcurrent = next;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (current !== null) {\r\n\t\t\tresult.push(current);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * The start line number.\r\n\t */\r\n\tpublic readonly startLineNumber: number;\r\n\r\n\t/**\r\n\t * The end line number (exclusive).\r\n\t */\r\n\tpublic readonly endLineNumberExclusive: number;\r\n\r\n\tconstructor(\r\n\t\tstartLineNumber: number,\r\n\t\tendLineNumberExclusive: number,\r\n\t) {\r\n\t\tif (startLineNumber > endLineNumberExclusive) {\r\n\t\t\tthrow new BugIndicatingError(`startLineNumber ${startLineNumber} cannot be after endLineNumberExclusive ${endLineNumberExclusive}`);\r\n\t\t}\r\n\t\tthis.startLineNumber = startLineNumber;\r\n\t\tthis.endLineNumberExclusive = endLineNumberExclusive;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this line range contains the given line number.\r\n\t */\r\n\tpublic contains(lineNumber: number): boolean {\r\n\t\treturn this.startLineNumber <= lineNumber && lineNumber < this.endLineNumberExclusive;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this line range is empty.\r\n\t */\r\n\tget isEmpty(): boolean {\r\n\t\treturn this.startLineNumber === this.endLineNumberExclusive;\r\n\t}\r\n\r\n\t/**\r\n\t * Moves this line range by the given offset of line numbers.\r\n\t */\r\n\tpublic delta(offset: number): LineRange {\r\n\t\treturn new LineRange(this.startLineNumber + offset, this.endLineNumberExclusive + offset);\r\n\t}\r\n\r\n\t/**\r\n\t * The number of lines this line range spans.\r\n\t */\r\n\tpublic get length(): number {\r\n\t\treturn this.endLineNumberExclusive - this.startLineNumber;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a line range that combines this and the given line range.\r\n\t */\r\n\tpublic join(other: LineRange): LineRange {\r\n\t\treturn new LineRange(\r\n\t\t\tMath.min(this.startLineNumber, other.startLineNumber),\r\n\t\t\tMath.max(this.endLineNumberExclusive, other.endLineNumberExclusive)\r\n\t\t);\r\n\t}\r\n\r\n\tpublic toString(): string {\r\n\t\treturn `[${this.startLineNumber},${this.endLineNumberExclusive})`;\r\n\t}\r\n\r\n\t/**\r\n\t * The resulting range is empty if the ranges do not intersect, but touch.\r\n\t * If the ranges don't even touch, the result is undefined.\r\n\t */\r\n\tpublic intersect(other: LineRange): LineRange | undefined {\r\n\t\tconst startLineNumber = Math.max(this.startLineNumber, other.startLineNumber);\r\n\t\tconst endLineNumberExclusive = Math.min(this.endLineNumberExclusive, other.endLineNumberExclusive);\r\n\t\tif (startLineNumber <= endLineNumberExclusive) {\r\n\t\t\treturn new LineRange(startLineNumber, endLineNumberExclusive);\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tpublic overlapOrTouch(other: LineRange): boolean {\r\n\t\treturn this.startLineNumber <= other.endLineNumberExclusive && other.startLineNumber <= this.endLineNumberExclusive;\r\n\t}\r\n\r\n\tpublic equals(b: LineRange): boolean {\r\n\t\treturn this.startLineNumber === b.startLineNumber && this.endLineNumberExclusive === b.endLineNumberExclusive;\r\n\t}\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport { BugIndicatingError } from '../../../../vs/base/common/errors';\r\n\r\n/**\r\n * A range of offsets (0-based).\r\n*/\r\nexport class OffsetRange {\r\n\tpublic static addRange(range: OffsetRange, sortedRanges: OffsetRange[]): void {\r\n\t\tlet i = 0;\r\n\t\twhile (i < sortedRanges.length && sortedRanges[i].endExclusive < range.start) {\r\n\t\t\ti++;\r\n\t\t}\r\n\t\tlet j = i;\r\n\t\twhile (j < sortedRanges.length && sortedRanges[j].start <= range.endExclusive) {\r\n\t\t\tj++;\r\n\t\t}\r\n\t\tif (i === j) {\r\n\t\t\tsortedRanges.splice(i, 0, range);\r\n\t\t} else {\r\n\t\t\tconst start = Math.min(range.start, sortedRanges[i].start);\r\n\t\t\tconst end = Math.max(range.endExclusive, sortedRanges[j - 1].endExclusive);\r\n\t\t\tsortedRanges.splice(i, j - i, new OffsetRange(start, end));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static tryCreate(start: number, endExclusive: number): OffsetRange | undefined {\r\n\t\tif (start > endExclusive) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\treturn new OffsetRange(start, endExclusive);\r\n\t}\r\n\r\n\tconstructor(public readonly start: number, public readonly endExclusive: number) {\r\n\t\tif (start > endExclusive) {\r\n\t\t\tthrow new BugIndicatingError(`Invalid range: ${this.toString()}`);\r\n\t\t}\r\n\t}\r\n\r\n\tget isEmpty(): boolean {\r\n\t\treturn this.start === this.endExclusive;\r\n\t}\r\n\r\n\tpublic delta(offset: number): OffsetRange {\r\n\t\treturn new OffsetRange(this.start + offset, this.endExclusive + offset);\r\n\t}\r\n\r\n\tpublic get length(): number {\r\n\t\treturn this.endExclusive - this.start;\r\n\t}\r\n\r\n\tpublic toString() {\r\n\t\treturn `[${this.start}, ${this.endExclusive})`;\r\n\t}\r\n\r\n\tpublic equals(other: OffsetRange): boolean {\r\n\t\treturn this.start === other.start && this.endExclusive === other.endExclusive;\r\n\t}\r\n\r\n\tpublic containsRange(other: OffsetRange): boolean {\r\n\t\treturn this.start <= other.start && other.endExclusive <= this.endExclusive;\r\n\t}\r\n\r\n\tpublic contains(offset: number): boolean {\r\n\t\treturn this.start <= offset && offset < this.endExclusive;\r\n\t}\r\n\r\n\t/**\r\n\t * for all numbers n: range1.contains(n) or range2.contains(n) => range1.join(range2).contains(n)\r\n\t * The joined range is the smallest range that contains both ranges.\r\n\t */\r\n\tpublic join(other: OffsetRange): OffsetRange {\r\n\t\treturn new OffsetRange(Math.min(this.start, other.start), Math.max(this.endExclusive, other.endExclusive));\r\n\t}\r\n\r\n\t/**\r\n\t * for all numbers n: range1.contains(n) and range2.contains(n) <=> range1.intersect(range2).contains(n)\r\n\t *\r\n\t * The resulting range is empty if the ranges do not intersect, but touch.\r\n\t * If the ranges don't even touch, the result is undefined.\r\n\t */\r\n\tpublic intersect(other: OffsetRange): OffsetRange | undefined {\r\n\t\tconst start = Math.max(this.start, other.start);\r\n\t\tconst end = Math.min(this.endExclusive, other.endExclusive);\r\n\t\tif (start <= end) {\r\n\t\t\treturn new OffsetRange(start, end);\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * A position in the editor. This interface is suitable for serialization.\r\n */\r\nexport interface IPosition {\r\n\t/**\r\n\t * line number (starts at 1)\r\n\t */\r\n\treadonly lineNumber: number;\r\n\t/**\r\n\t * column (the first character in a line is between column 1 and column 2)\r\n\t */\r\n\treadonly column: number;\r\n}\r\n\r\n/**\r\n * A position in the editor.\r\n */\r\nexport class Position {\r\n\t/**\r\n\t * line number (starts at 1)\r\n\t */\r\n\tpublic readonly lineNumber: number;\r\n\t/**\r\n\t * column (the first character in a line is between column 1 and column 2)\r\n\t */\r\n\tpublic readonly column: number;\r\n\r\n\tconstructor(lineNumber: number, column: number) {\r\n\t\tthis.lineNumber = lineNumber;\r\n\t\tthis.column = column;\r\n\t}\r\n\r\n\t/**\r\n\t * Create a new position from this position.\r\n\t *\r\n\t * @param newLineNumber new line number\r\n\t * @param newColumn new column\r\n\t */\r\n\twith(newLineNumber: number = this.lineNumber, newColumn: number = this.column): Position {\r\n\t\tif (newLineNumber === this.lineNumber && newColumn === this.column) {\r\n\t\t\treturn this;\r\n\t\t} else {\r\n\t\t\treturn new Position(newLineNumber, newColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Derive a new position from this position.\r\n\t *\r\n\t * @param deltaLineNumber line number delta\r\n\t * @param deltaColumn column delta\r\n\t */\r\n\tdelta(deltaLineNumber: number = 0, deltaColumn: number = 0): Position {\r\n\t\treturn this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\r\n\t}\r\n\r\n\t/**\r\n\t * Test if this position equals other position\r\n\t */\r\n\tpublic equals(other: IPosition): boolean {\r\n\t\treturn Position.equals(this, other);\r\n\t}\r\n\r\n\t/**\r\n\t * Test if position `a` equals position `b`\r\n\t */\r\n\tpublic static equals(a: IPosition | null, b: IPosition | null): boolean {\r\n\t\tif (!a && !b) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t!!a &&\r\n\t\t\t!!b &&\r\n\t\t\ta.lineNumber === b.lineNumber &&\r\n\t\t\ta.column === b.column\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Test if this position is before other position.\r\n\t * If the two positions are equal, the result will be false.\r\n\t */\r\n\tpublic isBefore(other: IPosition): boolean {\r\n\t\treturn Position.isBefore(this, other);\r\n\t}\r\n\r\n\t/**\r\n\t * Test if position `a` is before position `b`.\r\n\t * If the two positions are equal, the result will be false.\r\n\t */\r\n\tpublic static isBefore(a: IPosition, b: IPosition): boolean {\r\n\t\tif (a.lineNumber < b.lineNumber) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (b.lineNumber < a.lineNumber) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn a.column < b.column;\r\n\t}\r\n\r\n\t/**\r\n\t * Test if this position is before other position.\r\n\t * If the two positions are equal, the result will be true.\r\n\t */\r\n\tpublic isBeforeOrEqual(other: IPosition): boolean {\r\n\t\treturn Position.isBeforeOrEqual(this, other);\r\n\t}\r\n\r\n\t/**\r\n\t * Test if position `a` is before position `b`.\r\n\t * If the two positions are equal, the result will be true.\r\n\t */\r\n\tpublic static isBeforeOrEqual(a: IPosition, b: IPosition): boolean {\r\n\t\tif (a.lineNumber < b.lineNumber) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (b.lineNumber < a.lineNumber) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn a.column <= b.column;\r\n\t}\r\n\r\n\t/**\r\n\t * A function that compares positions, useful for sorting\r\n\t */\r\n\tpublic static compare(a: IPosition, b: IPosition): number {\r\n\t\tconst aLineNumber = a.lineNumber | 0;\r\n\t\tconst bLineNumber = b.lineNumber | 0;\r\n\r\n\t\tif (aLineNumber === bLineNumber) {\r\n\t\t\tconst aColumn = a.column | 0;\r\n\t\t\tconst bColumn = b.column | 0;\r\n\t\t\treturn aColumn - bColumn;\r\n\t\t}\r\n\r\n\t\treturn aLineNumber - bLineNumber;\r\n\t}\r\n\r\n\t/**\r\n\t * Clone this position.\r\n\t */\r\n\tpublic clone(): Position {\r\n\t\treturn new Position(this.lineNumber, this.column);\r\n\t}\r\n\r\n\t/**\r\n\t * Convert to a human-readable representation.\r\n\t */\r\n\tpublic toString(): string {\r\n\t\treturn '(' + this.lineNumber + ',' + this.column + ')';\r\n\t}\r\n\r\n\t// ---\r\n\r\n\t/**\r\n\t * Create a `Position` from an `IPosition`.\r\n\t */\r\n\tpublic static lift(pos: IPosition): Position {\r\n\t\treturn new Position(pos.lineNumber, pos.column);\r\n\t}\r\n\r\n\t/**\r\n\t * Test if `obj` is an `IPosition`.\r\n\t */\r\n\tpublic static isIPosition(obj: any): obj is IPosition {\r\n\t\treturn (\r\n\t\t\tobj\r\n\t\t\t&& (typeof obj.lineNumber === 'number')\r\n\t\t\t&& (typeof obj.column === 'number')\r\n\t\t);\r\n\t}\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport { IPosition, Position } from '../../../../vs/editor/common/core/position';\r\n\r\n/**\r\n * A range in the editor. This interface is suitable for serialization.\r\n */\r\nexport interface IRange {\r\n\t/**\r\n\t * Line number on which the range starts (starts at 1).\r\n\t */\r\n\treadonly startLineNumber: number;\r\n\t/**\r\n\t * Column on which the range starts in line `startLineNumber` (starts at 1).\r\n\t */\r\n\treadonly startColumn: number;\r\n\t/**\r\n\t * Line number on which the range ends.\r\n\t */\r\n\treadonly endLineNumber: number;\r\n\t/**\r\n\t * Column on which the range ends in line `endLineNumber`.\r\n\t */\r\n\treadonly endColumn: number;\r\n}\r\n\r\n/**\r\n * A range in the editor. (startLineNumber,startColumn) is <= (endLineNumber,endColumn)\r\n */\r\nexport class Range {\r\n\r\n\t/**\r\n\t * Line number on which the range starts (starts at 1).\r\n\t */\r\n\tpublic readonly startLineNumber: number;\r\n\t/**\r\n\t * Column on which the range starts in line `startLineNumber` (starts at 1).\r\n\t */\r\n\tpublic readonly startColumn: number;\r\n\t/**\r\n\t * Line number on which the range ends.\r\n\t */\r\n\tpublic readonly endLineNumber: number;\r\n\t/**\r\n\t * Column on which the range ends in line `endLineNumber`.\r\n\t */\r\n\tpublic readonly endColumn: number;\r\n\r\n\tconstructor(startLineNumber: number, startColumn: number, endLineNumber: number, endColumn: number) {\r\n\t\tif ((startLineNumber > endLineNumber) || (startLineNumber === endLineNumber && startColumn > endColumn)) {\r\n\t\t\tthis.startLineNumber = endLineNumber;\r\n\t\t\tthis.startColumn = endColumn;\r\n\t\t\tthis.endLineNumber = startLineNumber;\r\n\t\t\tthis.endColumn = startColumn;\r\n\t\t} else {\r\n\t\t\tthis.startLineNumber = startLineNumber;\r\n\t\t\tthis.startColumn = startColumn;\r\n\t\t\tthis.endLineNumber = endLineNumber;\r\n\t\t\tthis.endColumn = endColumn;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Test if this range is empty.\r\n\t */\r\n\tpublic isEmpty(): boolean {\r\n\t\treturn Range.isEmpty(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Test if `range` is empty.\r\n\t */\r\n\tpublic static isEmpty(range: IRange): boolean {\r\n\t\treturn (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn);\r\n\t}\r\n\r\n\t/**\r\n\t * Test if position is in this range. If the position is at the edges, will return true.\r\n\t */\r\n\tpublic containsPosition(position: IPosition): boolean {\r\n\t\treturn Range.containsPosition(this, position);\r\n\t}\r\n\r\n\t/**\r\n\t * Test if `position` is in `range`. If the position is at the edges, will return true.\r\n\t */\r\n\tpublic static containsPosition(range: IRange, position: IPosition): boolean {\r\n\t\tif (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (position.lineNumber === range.startLineNumber && position.column < range.startColumn) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (position.lineNumber === range.endLineNumber && position.column > range.endColumn) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Test if `position` is in `range`. If the position is at the edges, will return false.\r\n\t * @internal\r\n\t */\r\n\tpublic static strictContainsPosition(range: IRange, position: IPosition): boolean {\r\n\t\tif (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (position.lineNumber === range.startLineNumber && position.column <= range.startColumn) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (position.lineNumber === range.endLineNumber && position.column >= range.endColumn) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Test if range is in this range. If the range is equal to this range, will return true.\r\n\t */\r\n\tpublic containsRange(range: IRange): boolean {\r\n\t\treturn Range.containsRange(this, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Test if `otherRange` is in `range`. If the ranges are equal, will return true.\r\n\t */\r\n\tpublic static containsRange(range: IRange, otherRange: IRange): boolean {\r\n\t\tif (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn < range.startColumn) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn > range.endColumn) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Test if `range` is strictly in this range. `range` must start after and end before this range for the result to be true.\r\n\t */\r\n\tpublic strictContainsRange(range: IRange): boolean {\r\n\t\treturn Range.strictContainsRange(this, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Test if `otherRange` is strictly in `range` (must start after, and end before). If the ranges are equal, will return false.\r\n\t */\r\n\tpublic static strictContainsRange(range: IRange, otherRange: IRange): boolean {\r\n\t\tif (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn <= range.startColumn) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn >= range.endColumn) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * A reunion of the two ranges.\r\n\t * The smallest position will be used as the start point, and the largest one as the end point.\r\n\t */\r\n\tpublic plusRange(range: IRange): Range {\r\n\t\treturn Range.plusRange(this, range);\r\n\t}\r\n\r\n\t/**\r\n\t * A reunion of the two ranges.\r\n\t * The smallest position will be used as the start point, and the largest one as the end point.\r\n\t */\r\n\tpublic static plusRange(a: IRange, b: IRange): Range {\r\n\t\tlet startLineNumber: number;\r\n\t\tlet startColumn: number;\r\n\t\tlet endLineNumber: number;\r\n\t\tlet endColumn: number;\r\n\r\n\t\tif (b.startLineNumber < a.startLineNumber) {\r\n\t\t\tstartLineNumber = b.startLineNumber;\r\n\t\t\tstartColumn = b.startColumn;\r\n\t\t} else if (b.startLineNumber === a.startLineNumber) {\r\n\t\t\tstartLineNumber = b.startLineNumber;\r\n\t\t\tstartColumn = Math.min(b.startColumn, a.startColumn);\r\n\t\t} else {\r\n\t\t\tstartLineNumber = a.startLineNumber;\r\n\t\t\tstartColumn = a.startColumn;\r\n\t\t}\r\n\r\n\t\tif (b.endLineNumber > a.endLineNumber) {\r\n\t\t\tendLineNumber = b.endLineNumber;\r\n\t\t\tendColumn = b.endColumn;\r\n\t\t} else if (b.endLineNumber === a.endLineNumber) {\r\n\t\t\tendLineNumber = b.endLineNumber;\r\n\t\t\tendColumn = Math.max(b.endColumn, a.endColumn);\r\n\t\t} else {\r\n\t\t\tendLineNumber = a.endLineNumber;\r\n\t\t\tendColumn = a.endColumn;\r\n\t\t}\r\n\r\n\t\treturn new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n\t}\r\n\r\n\t/**\r\n\t * A intersection of the two ranges.\r\n\t */\r\n\tpublic intersectRanges(range: IRange): Range | null {\r\n\t\treturn Range.intersectRanges(this, range);\r\n\t}\r\n\r\n\t/**\r\n\t * A intersection of the two ranges.\r\n\t */\r\n\tpublic static intersectRanges(a: IRange, b: IRange): Range | null {\r\n\t\tlet resultStartLineNumber = a.startLineNumber;\r\n\t\tlet resultStartColumn = a.startColumn;\r\n\t\tlet resultEndLineNumber = a.endLineNumber;\r\n\t\tlet resultEndColumn = a.endColumn;\r\n\t\tconst otherStartLineNumber = b.startLineNumber;\r\n\t\tconst otherStartColumn = b.startColumn;\r\n\t\tconst otherEndLineNumber = b.endLineNumber;\r\n\t\tconst otherEndColumn = b.endColumn;\r\n\r\n\t\tif (resultStartLineNumber < otherStartLineNumber) {\r\n\t\t\tresultStartLineNumber = otherStartLineNumber;\r\n\t\t\tresultStartColumn = otherStartColumn;\r\n\t\t} else if (resultStartLineNumber === otherStartLineNumber) {\r\n\t\t\tresultStartColumn = Math.max(resultStartColumn, otherStartColumn);\r\n\t\t}\r\n\r\n\t\tif (resultEndLineNumber > otherEndLineNumber) {\r\n\t\t\tresultEndLineNumber = otherEndLineNumber;\r\n\t\t\tresultEndColumn = otherEndColumn;\r\n\t\t} else if (resultEndLineNumber === otherEndLineNumber) {\r\n\t\t\tresultEndColumn = Math.min(resultEndColumn, otherEndColumn);\r\n\t\t}\r\n\r\n\t\t// Check if selection is now empty\r\n\t\tif (resultStartLineNumber > resultEndLineNumber) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (resultStartLineNumber === resultEndLineNumber && resultStartColumn > resultEndColumn) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn new Range(resultStartLineNumber, resultStartColumn, resultEndLineNumber, resultEndColumn);\r\n\t}\r\n\r\n\t/**\r\n\t * Test if this range equals other.\r\n\t */\r\n\tpublic equalsRange(other: IRange | null | undefined): boolean {\r\n\t\treturn Range.equalsRange(this, other);\r\n\t}\r\n\r\n\t/**\r\n\t * Test if range `a` equals `b`.\r\n\t */\r\n\tpublic static equalsRange(a: IRange | null | undefined, b: IRange | null | undefined): boolean {\r\n\t\tif (!a && !b) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t!!a &&\r\n\t\t\t!!b &&\r\n\t\t\ta.startLineNumber === b.startLineNumber &&\r\n\t\t\ta.startColumn === b.startColumn &&\r\n\t\t\ta.endLineNumber === b.endLineNumber &&\r\n\t\t\ta.endColumn === b.endColumn\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Return the end position (which will be after or equal to the start position)\r\n\t */\r\n\tpublic getEndPosition(): Position {\r\n\t\treturn Range.getEndPosition(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Return the end position (which will be after or equal to the start position)\r\n\t */\r\n\tpublic static getEndPosition(range: IRange): Position {\r\n\t\treturn new Position(range.endLineNumber, range.endColumn);\r\n\t}\r\n\r\n\t/**\r\n\t * Return the start position (which will be before or equal to the end position)\r\n\t */\r\n\tpublic getStartPosition(): Position {\r\n\t\treturn Range.getStartPosition(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Return the start position (which will be before or equal to the end position)\r\n\t */\r\n\tpublic static getStartPosition(range: IRange): Position {\r\n\t\treturn new Position(range.startLineNumber, range.startColumn);\r\n\t}\r\n\r\n\t/**\r\n\t * Transform to a user presentable string representation.\r\n\t */\r\n\tpublic toString(): string {\r\n\t\treturn '[' + this.startLineNumber + ',' + this.startColumn + ' -> ' + this.endLineNumber + ',' + this.endColumn + ']';\r\n\t}\r\n\r\n\t/**\r\n\t * Create a new range using this range's start position, and using endLineNumber and endColumn as the end position.\r\n\t */\r\n\tpublic setEndPosition(endLineNumber: number, endColumn: number): Range {\r\n\t\treturn new Range(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\r\n\t}\r\n\r\n\t/**\r\n\t * Create a new range using this range's end position, and using startLineNumber and startColumn as the start position.\r\n\t */\r\n\tpublic setStartPosition(startLineNumber: number, startColumn: number): Range {\r\n\t\treturn new Range(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\r\n\t}\r\n\r\n\t/**\r\n\t * Create a new empty range using this range's start position.\r\n\t */\r\n\tpublic collapseToStart(): Range {\r\n\t\treturn Range.collapseToStart(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Create a new empty range using this range's start position.\r\n\t */\r\n\tpublic static collapseToStart(range: IRange): Range {\r\n\t\treturn new Range(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\r\n\t}\r\n\r\n\t/**\r\n\t * Create a new empty range using this range's end position.\r\n\t */\r\n\tpublic collapseToEnd(): Range {\r\n\t\treturn Range.collapseToEnd(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Create a new empty range using this range's end position.\r\n\t */\r\n\tpublic static collapseToEnd(range: IRange): Range {\r\n\t\treturn new Range(range.endLineNumber, range.endColumn, range.endLineNumber, range.endColumn);\r\n\t}\r\n\r\n\t/**\r\n\t * Moves the range by the given amount of lines.\r\n\t */\r\n\tpublic delta(lineCount: number): Range {\r\n\t\treturn new Range(this.startLineNumber + lineCount, this.startColumn, this.endLineNumber + lineCount, this.endColumn);\r\n\t}\r\n\r\n\t// ---\r\n\r\n\tpublic static fromPositions(start: IPosition, end: IPosition = start): Range {\r\n\t\treturn new Range(start.lineNumber, start.column, end.lineNumber, end.column);\r\n\t}\r\n\r\n\t/**\r\n\t * Create a `Range` from an `IRange`.\r\n\t */\r\n\tpublic static lift(range: undefined | null): null;\r\n\tpublic static lift(range: IRange): Range;\r\n\tpublic static lift(range: IRange | undefined | null): Range | null;\r\n\tpublic static lift(range: IRange | undefined | null): Range | null {\r\n\t\tif (!range) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\r\n\t}\r\n\r\n\t/**\r\n\t * Test if `obj` is an `IRange`.\r\n\t */\r\n\tpublic static isIRange(obj: any): obj is IRange {\r\n\t\treturn (\r\n\t\t\tobj\r\n\t\t\t&& (typeof obj.startLineNumber === 'number')\r\n\t\t\t&& (typeof obj.startColumn === 'number')\r\n\t\t\t&& (typeof obj.endLineNumber === 'number')\r\n\t\t\t&& (typeof obj.endColumn === 'number')\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Test if the two ranges are touching in any way.\r\n\t */\r\n\tpublic static areIntersectingOrTouching(a: IRange, b: IRange): boolean {\r\n\t\t// Check if `a` is before `b`\r\n\t\tif (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn < b.startColumn)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Check if `b` is before `a`\r\n\t\tif (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn < a.startColumn)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// These ranges must intersect\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Test if the two ranges are intersecting. If the ranges are touching it returns true.\r\n\t */\r\n\tpublic static areIntersecting(a: IRange, b: IRange): boolean {\r\n\t\t// Check if `a` is before `b`\r\n\t\tif (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn <= b.startColumn)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Check if `b` is before `a`\r\n\t\tif (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn <= a.startColumn)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// These ranges must intersect\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * A function that compares ranges, useful for sorting ranges\r\n\t * It will first compare ranges on the startPosition and then on the endPosition\r\n\t */\r\n\tpublic static compareRangesUsingStarts(a: IRange | null | undefined, b: IRange | null | undefined): number {\r\n\t\tif (a && b) {\r\n\t\t\tconst aStartLineNumber = a.startLineNumber | 0;\r\n\t\t\tconst bStartLineNumber = b.startLineNumber | 0;\r\n\r\n\t\t\tif (aStartLineNumber === bStartLineNumber) {\r\n\t\t\t\tconst aStartColumn = a.startColumn | 0;\r\n\t\t\t\tconst bStartColumn = b.startColumn | 0;\r\n\r\n\t\t\t\tif (aStartColumn === bStartColumn) {\r\n\t\t\t\t\tconst aEndLineNumber = a.endLineNumber | 0;\r\n\t\t\t\t\tconst bEndLineNumber = b.endLineNumber | 0;\r\n\r\n\t\t\t\t\tif (aEndLineNumber === bEndLineNumber) {\r\n\t\t\t\t\t\tconst aEndColumn = a.endColumn | 0;\r\n\t\t\t\t\t\tconst bEndColumn = b.endColumn | 0;\r\n\t\t\t\t\t\treturn aEndColumn - bEndColumn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn aEndLineNumber - bEndLineNumber;\r\n\t\t\t\t}\r\n\t\t\t\treturn aStartColumn - bStartColumn;\r\n\t\t\t}\r\n\t\t\treturn aStartLineNumber - bStartLineNumber;\r\n\t\t}\r\n\t\tconst aExists = (a ? 1 : 0);\r\n\t\tconst bExists = (b ? 1 : 0);\r\n\t\treturn aExists - bExists;\r\n\t}\r\n\r\n\t/**\r\n\t * A function that compares ranges, useful for sorting ranges\r\n\t * It will first compare ranges on the endPosition and then on the startPosition\r\n\t */\r\n\tpublic static compareRangesUsingEnds(a: IRange, b: IRange): number {\r\n\t\tif (a.endLineNumber === b.endLineNumber) {\r\n\t\t\tif (a.endColumn === b.endColumn) {\r\n\t\t\t\tif (a.startLineNumber === b.startLineNumber) {\r\n\t\t\t\t\treturn a.startColumn - b.startColumn;\r\n\t\t\t\t}\r\n\t\t\t\treturn a.startLineNumber - b.startLineNumber;\r\n\t\t\t}\r\n\t\t\treturn a.endColumn - b.endColumn;\r\n\t\t}\r\n\t\treturn a.endLineNumber - b.endLineNumber;\r\n\t}\r\n\r\n\t/**\r\n\t * Test if the range spans multiple lines.\r\n\t */\r\n\tpublic static spansMultipleLines(range: IRange): boolean {\r\n\t\treturn range.endLineNumber > range.startLineNumber;\r\n\t}\r\n\r\n\tpublic toJSON(): IRange {\r\n\t\treturn this;\r\n\t}\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport { BugIndicatingError } from '../../../../../vs/base/common/errors';\r\nimport { OffsetRange } from '../../../../../vs/editor/common/core/offsetRange';\r\n\r\n/**\r\n * Represents a synchronous diff algorithm. Should be executed in a worker.\r\n*/\r\nexport interface IDiffAlgorithm {\r\n\tcompute(sequence1: ISequence, sequence2: ISequence, timeout?: ITimeout): DiffAlgorithmResult;\r\n}\r\n\r\nexport class DiffAlgorithmResult {\r\n\tstatic trivial(seq1: ISequence, seq2: ISequence): DiffAlgorithmResult {\r\n\t\treturn new DiffAlgorithmResult([new SequenceDiff(new OffsetRange(0, seq1.length), new OffsetRange(0, seq2.length))], false);\r\n\t}\r\n\r\n\tstatic trivialTimedOut(seq1: ISequence, seq2: ISequence): DiffAlgorithmResult {\r\n\t\treturn new DiffAlgorithmResult([new SequenceDiff(new OffsetRange(0, seq1.length), new OffsetRange(0, seq2.length))], true);\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tpublic readonly diffs: SequenceDiff[],\r\n\t\t/**\r\n\t\t * Indicates if the time out was reached.\r\n\t\t * In that case, the diffs might be an approximation and the user should be asked to rerun the diff with more time.\r\n\t\t */\r\n\t\tpublic readonly hitTimeout: boolean,\r\n\t) { }\r\n}\r\n\r\nexport class SequenceDiff {\r\n\tconstructor(\r\n\t\tpublic readonly seq1Range: OffsetRange,\r\n\t\tpublic readonly seq2Range: OffsetRange,\r\n\t) { }\r\n\r\n\tpublic reverse(): SequenceDiff {\r\n\t\treturn new SequenceDiff(this.seq2Range, this.seq1Range);\r\n\t}\r\n\r\n\tpublic toString(): string {\r\n\t\treturn `${this.seq1Range} <-> ${this.seq2Range}`;\r\n\t}\r\n\r\n\tpublic join(other: SequenceDiff): SequenceDiff {\r\n\t\treturn new SequenceDiff(this.seq1Range.join(other.seq1Range), this.seq2Range.join(other.seq2Range));\r\n\t}\r\n}\r\n\r\nexport interface ISequence {\r\n\tgetElement(offset: number): number;\r\n\tget length(): number;\r\n\r\n\t/**\r\n\t * The higher the score, the better that offset can be used to split the sequence.\r\n\t * Is used to optimize insertions.\r\n\t * Must not be negative.\r\n\t*/\r\n\tgetBoundaryScore?(length: number): number;\r\n}\r\n\r\nexport interface ITimeout {\r\n\tisValid(): boolean;\r\n}\r\n\r\nexport class InfiniteTimeout implements ITimeout {\r\n\tpublic static instance = new InfiniteTimeout();\r\n\r\n\tisValid(): boolean {\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport class DateTimeout implements ITimeout {\r\n\tprivate readonly startTime = Date.now();\r\n\tprivate valid = true;\r\n\r\n\tconstructor(private timeout: number) {\r\n\t\tif (timeout <= 0) {\r\n\t\t\tthrow new BugIndicatingError('timeout must be positive');\r\n\t\t}\r\n\t}\r\n\r\n\t// Recommendation: Set a log-point `{this.disable()}` in the body\r\n\tpublic isValid(): boolean {\r\n\t\tconst valid = Date.now() - this.startTime < this.timeout;\r\n\t\tif (!valid && this.valid) {\r\n\t\t\tthis.valid = false; // timeout reached\r\n\t\t\t// eslint-disable-next-line no-debugger\r\n\t\t\tdebugger; // WARNING: Most likely debugging caused the timeout. Call `this.disable()` to continue without timing out.\r\n\t\t}\r\n\t\treturn this.valid;\r\n\t}\r\n\r\n\tpublic disable() {\r\n\t\tthis.timeout = Number.MAX_SAFE_INTEGER;\r\n\t\tthis.isValid = () => true;\r\n\t\tthis.valid = true;\r\n\t}\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nexport class Array2D<T> {\r\n\tprivate readonly array: T[] = [];\r\n\r\n\tconstructor(public readonly width: number, public readonly height: number) {\r\n\t\tthis.array = new Array<T>(width * height);\r\n\t}\r\n\r\n\tget(x: number, y: number): T {\r\n\t\treturn this.array[x + y * this.width];\r\n\t}\r\n\r\n\tset(x: number, y: number, value: T): void {\r\n\t\tthis.array[x + y * this.width] = value;\r\n\t}\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport { OffsetRange } from '../../../../../vs/editor/common/core/offsetRange';\r\nimport { IDiffAlgorithm, SequenceDiff, ISequence, ITimeout, InfiniteTimeout, DiffAlgorithmResult } from '../../../../../vs/editor/common/diff/algorithms/diffAlgorithm';\r\nimport { Array2D } from '../../../../../vs/editor/common/diff/algorithms/utils';\r\n\r\n/**\r\n * A O(MN) diffing algorithm that supports a score function.\r\n * The algorithm can be improved by processing the 2d array diagonally.\r\n*/\r\nexport class DynamicProgrammingDiffing implements IDiffAlgorithm {\r\n\tcompute(sequence1: ISequence, sequence2: ISequence, timeout: ITimeout = InfiniteTimeout.instance, equalityScore?: (offset1: number, offset2: number) => number): DiffAlgorithmResult {\r\n\t\tif (sequence1.length === 0 || sequence2.length === 0) {\r\n\t\t\treturn DiffAlgorithmResult.trivial(sequence1, sequence2);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * lcsLengths.get(i, j): Length of the longest common subsequence of sequence1.substring(0, i + 1) and sequence2.substring(0, j + 1).\r\n\t\t */\r\n\t\tconst lcsLengths = new Array2D<number>(sequence1.length, sequence2.length);\r\n\t\tconst directions = new Array2D<number>(sequence1.length, sequence2.length);\r\n\t\tconst lengths = new Array2D<number>(sequence1.length, sequence2.length);\r\n\r\n\t\t// ==== Initializing lcsLengths ====\r\n\t\tfor (let s1 = 0; s1 < sequence1.length; s1++) {\r\n\t\t\tfor (let s2 = 0; s2 < sequence2.length; s2++) {\r\n\t\t\t\tif (!timeout.isValid()) {\r\n\t\t\t\t\treturn DiffAlgorithmResult.trivialTimedOut(sequence1, sequence2);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst horizontalLen = s1 === 0 ? 0 : lcsLengths.get(s1 - 1, s2);\r\n\t\t\t\tconst verticalLen = s2 === 0 ? 0 : lcsLengths.get(s1, s2 - 1);\r\n\r\n\t\t\t\tlet extendedSeqScore: number;\r\n\t\t\t\tif (sequence1.getElement(s1) === sequence2.getElement(s2)) {\r\n\t\t\t\t\tif (s1 === 0 || s2 === 0) {\r\n\t\t\t\t\t\textendedSeqScore = 0;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\textendedSeqScore = lcsLengths.get(s1 - 1, s2 - 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (s1 > 0 && s2 > 0 && directions.get(s1 - 1, s2 - 1) === 3) {\r\n\t\t\t\t\t\t// Prefer consecutive diagonals\r\n\t\t\t\t\t\textendedSeqScore += lengths.get(s1 - 1, s2 - 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\textendedSeqScore += (equalityScore ? equalityScore(s1, s2) : 1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\textendedSeqScore = -1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst newValue = Math.max(horizontalLen, verticalLen, extendedSeqScore);\r\n\r\n\t\t\t\tif (newValue === extendedSeqScore) {\r\n\t\t\t\t\t// Prefer diagonals\r\n\t\t\t\t\tconst prevLen = s1 > 0 && s2 > 0 ? lengths.get(s1 - 1, s2 - 1) : 0;\r\n\t\t\t\t\tlengths.set(s1, s2, prevLen + 1);\r\n\t\t\t\t\tdirections.set(s1, s2, 3);\r\n\t\t\t\t} else if (newValue === horizontalLen) {\r\n\t\t\t\t\tlengths.set(s1, s2, 0);\r\n\t\t\t\t\tdirections.set(s1, s2, 1);\r\n\t\t\t\t} else if (newValue === verticalLen) {\r\n\t\t\t\t\tlengths.set(s1, s2, 0);\r\n\t\t\t\t\tdirections.set(s1, s2, 2);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlcsLengths.set(s1, s2, newValue);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// ==== Backtracking ====\r\n\t\tconst result: SequenceDiff[] = [];\r\n\t\tlet lastAligningPosS1: number = sequence1.length;\r\n\t\tlet lastAligningPosS2: number = sequence2.length;\r\n\r\n\t\tfunction reportDecreasingAligningPositions(s1: number, s2: number): void {\r\n\t\t\tif (s1 + 1 !== lastAligningPosS1 || s2 + 1 !== lastAligningPosS2) {\r\n\t\t\t\tresult.push(new SequenceDiff(\r\n\t\t\t\t\tnew OffsetRange(s1 + 1, lastAligningPosS1),\r\n\t\t\t\t\tnew OffsetRange(s2 + 1, lastAligningPosS2),\r\n\t\t\t\t));\r\n\t\t\t}\r\n\t\t\tlastAligningPosS1 = s1;\r\n\t\t\tlastAligningPosS2 = s2;\r\n\t\t}\r\n\r\n\t\tlet s1 = sequence1.length - 1;\r\n\t\tlet s2 = sequence2.length - 1;\r\n\t\twhile (s1 >= 0 && s2 >= 0) {\r\n\t\t\tif (directions.get(s1, s2) === 3) {\r\n\t\t\t\treportDecreasingAligningPositions(s1, s2);\r\n\t\t\t\ts1--;\r\n\t\t\t\ts2--;\r\n\t\t\t} else {\r\n\t\t\t\tif (directions.get(s1, s2) === 1) {\r\n\t\t\t\t\ts1--;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ts2--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treportDecreasingAligningPositions(-1, -1);\r\n\t\tresult.reverse();\r\n\t\treturn new DiffAlgorithmResult(result, false);\r\n\t}\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport { OffsetRange } from '../../../../../vs/editor/common/core/offsetRange';\r\nimport { ISequence, SequenceDiff } from '../../../../../vs/editor/common/diff/algorithms/diffAlgorithm';\r\n\r\nexport function optimizeSequenceDiffs(sequence1: ISequence, sequence2: ISequence, sequenceDiffs: SequenceDiff[]): SequenceDiff[] {\r\n\tlet result = sequenceDiffs;\r\n\tresult = joinSequenceDiffs(sequence1, sequence2, result);\r\n\tresult = shiftSequenceDiffs(sequence1, sequence2, result);\r\n\treturn result;\r\n}\r\n\r\nexport function smoothenSequenceDiffs(sequence1: ISequence, sequence2: ISequence, sequenceDiffs: SequenceDiff[]): SequenceDiff[] {\r\n\tconst result: SequenceDiff[] = [];\r\n\tfor (const s of sequenceDiffs) {\r\n\t\tconst last = result[result.length - 1];\r\n\t\tif (!last) {\r\n\t\t\tresult.push(s);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tif (s.seq1Range.start - last.seq1Range.endExclusive <= 2 || s.seq2Range.start - last.seq2Range.endExclusive <= 2) {\r\n\t\t\tresult[result.length - 1] = new SequenceDiff(last.seq1Range.join(s.seq1Range), last.seq2Range.join(s.seq2Range));\r\n\t\t} else {\r\n\t\t\tresult.push(s);\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * This function fixes issues like this:\r\n * ```\r\n * import { Baz, Bar } from \"foo\";\r\n * ```\r\n * <->\r\n * ```\r\n * import { Baz, Bar, Foo } from \"foo\";\r\n * ```\r\n * Computed diff: [ {Add \",\" after Bar}, {Add \"Foo \" after space} }\r\n * Improved diff: [{Add \", Foo\" after Bar}]\r\n */\r\nexport function joinSequenceDiffs(sequence1: ISequence, sequence2: ISequence, sequenceDiffs: SequenceDiff[]): SequenceDiff[] {\r\n\tconst result: SequenceDiff[] = [];\r\n\tif (sequenceDiffs.length > 0) {\r\n\t\tresult.push(sequenceDiffs[0]);\r\n\t}\r\n\r\n\tfor (let i = 1; i < sequenceDiffs.length; i++) {\r\n\t\tconst lastResult = result[result.length - 1];\r\n\t\tconst cur = sequenceDiffs[i];\r\n\r\n\t\tif (cur.seq1Range.isEmpty) {\r\n\t\t\tlet all = true;\r\n\t\t\tconst length = cur.seq1Range.start - lastResult.seq1Range.endExclusive;\r\n\t\t\tfor (let i = 1; i <= length; i++) {\r\n\t\t\t\tif (sequence2.getElement(cur.seq2Range.start - i) !== sequence2.getElement(cur.seq2Range.endExclusive - i)) {\r\n\t\t\t\t\tall = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (all) {\r\n\t\t\t\t// Merge previous and current diff\r\n\t\t\t\tresult[result.length - 1] = new SequenceDiff(lastResult.seq1Range, new OffsetRange(\r\n\t\t\t\t\tlastResult.seq2Range.start,\r\n\t\t\t\t\tcur.seq2Range.endExclusive - length\r\n\t\t\t\t));\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tresult.push(cur);\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n// align character level diffs at whitespace characters\r\n// import { IBar } from \"foo\";\r\n// import { I[Arr, I]Bar } from \"foo\";\r\n// ->\r\n// import { [IArr, ]IBar } from \"foo\";\r\n\r\n// import { ITransaction, observableValue, transaction } from 'vs/base/common/observable';\r\n// import { ITransaction, observable[FromEvent, observable]Value, transaction } from 'vs/base/common/observable';\r\n// ->\r\n// import { ITransaction, [observableFromEvent, ]observableValue, transaction } from 'vs/base/common/observable';\r\n\r\n// collectBrackets(level + 1, levelPerBracketType);\r\n// collectBrackets(level + 1, levelPerBracket[ + 1, levelPerBracket]Type);\r\n// ->\r\n// collectBrackets(level + 1, [levelPerBracket + 1, ]levelPerBracketType);\r\n\r\nexport function shiftSequenceDiffs(sequence1: ISequence, sequence2: ISequence, sequenceDiffs: SequenceDiff[]): SequenceDiff[] {\r\n\tif (!sequence1.getBoundaryScore || !sequence2.getBoundaryScore) {\r\n\t\treturn sequenceDiffs;\r\n\t}\r\n\r\n\tfor (let i = 0; i < sequenceDiffs.length; i++) {\r\n\t\tconst diff = sequenceDiffs[i];\r\n\t\tif (diff.seq1Range.isEmpty) {\r\n\t\t\tconst seq2PrevEndExclusive = (i > 0 ? sequenceDiffs[i - 1].seq2Range.endExclusive : -1);\r\n\t\t\tconst seq2NextStart = (i + 1 < sequenceDiffs.length ? sequenceDiffs[i + 1].seq2Range.start : sequence2.length);\r\n\t\t\tsequenceDiffs[i] = shiftDiffToBetterPosition(diff, sequence1, sequence2, seq2NextStart, seq2PrevEndExclusive);\r\n\t\t} else if (diff.seq2Range.isEmpty) {\r\n\t\t\tconst seq1PrevEndExclusive = (i > 0 ? sequenceDiffs[i - 1].seq1Range.endExclusive : -1);\r\n\t\t\tconst seq1NextStart = (i + 1 < sequenceDiffs.length ? sequenceDiffs[i + 1].seq1Range.start : sequence1.length);\r\n\t\t\tsequenceDiffs[i] = shiftDiffToBetterPosition(diff.reverse(), sequence2, sequence1, seq1NextStart, seq1PrevEndExclusive).reverse();\r\n\t\t}\r\n\t}\r\n\r\n\treturn sequenceDiffs;\r\n}\r\n\r\nfunction shiftDiffToBetterPosition(diff: SequenceDiff, sequence1: ISequence, sequence2: ISequence, seq2NextStart: number, seq2PrevEndExclusive: number) {\r\n\tconst maxShiftLimit = 20; // To prevent performance issues\r\n\r\n\t// don't touch previous or next!\r\n\tlet deltaBefore = 1;\r\n\twhile (diff.seq2Range.start - deltaBefore > seq2PrevEndExclusive &&\r\n\t\tsequence2.getElement(diff.seq2Range.start - deltaBefore) ===\r\n\t\tsequence2.getElement(diff.seq2Range.endExclusive - deltaBefore) && deltaBefore < maxShiftLimit) {\r\n\t\tdeltaBefore++;\r\n\t}\r\n\tdeltaBefore--;\r\n\r\n\tlet deltaAfter = 0;\r\n\twhile (diff.seq2Range.start + deltaAfter < seq2NextStart &&\r\n\t\tsequence2.getElement(diff.seq2Range.start + deltaAfter) ===\r\n\t\tsequence2.getElement(diff.seq2Range.endExclusive + deltaAfter) && deltaAfter < maxShiftLimit) {\r\n\t\tdeltaAfter++;\r\n\t}\r\n\r\n\tif (deltaBefore === 0 && deltaAfter === 0) {\r\n\t\treturn diff;\r\n\t}\r\n\r\n\t// Visualize `[sequence1.text, diff.seq1Range.start + deltaAfter]`\r\n\t// and `[sequence2.text, diff.seq2Range.start + deltaAfter, diff.seq2Range.endExclusive + deltaAfter]`\r\n\r\n\tlet bestDelta = 0;\r\n\tlet bestScore = -1;\r\n\t// find best scored delta\r\n\tfor (let delta = -deltaBefore; delta <= deltaAfter; delta++) {\r\n\t\tconst seq2OffsetStart = diff.seq2Range.start + delta;\r\n\t\tconst seq2OffsetEndExclusive = diff.seq2Range.endExclusive + delta;\r\n\t\tconst seq1Offset = diff.seq1Range.start + delta;\r\n\r\n\t\tconst score = sequence1.getBoundaryScore!(seq1Offset) + sequence2.getBoundaryScore!(seq2OffsetStart) + sequence2.getBoundaryScore!(seq2OffsetEndExclusive);\r\n\t\tif (score > bestScore) {\r\n\t\t\tbestScore = score;\r\n\t\t\tbestDelta = delta;\r\n\t\t}\r\n\t}\r\n\r\n\tif (bestDelta !== 0) {\r\n\t\treturn new SequenceDiff(diff.seq1Range.delta(bestDelta), diff.seq2Range.delta(bestDelta));\r\n\t}\r\n\treturn diff;\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport { OffsetRange } from '../../../../../vs/editor/common/core/offsetRange';\r\nimport { DiffAlgorithmResult, IDiffAlgorithm, ISequence, ITimeout, InfiniteTimeout, SequenceDiff } from '../../../../../vs/editor/common/diff/algorithms/diffAlgorithm';\r\n\r\n/**\r\n * An O(ND) diff algorithm that has a quadratic space worst-case complexity.\r\n*/\r\nexport class MyersDiffAlgorithm implements IDiffAlgorithm {\r\n\tcompute(seq1: ISequence, seq2: ISequence, timeout: ITimeout = InfiniteTimeout.instance): DiffAlgorithmResult {\r\n\t\t// These are common special cases.\r\n\t\t// The early return improves performance dramatically.\r\n\t\tif (seq1.length === 0 || seq2.length === 0) {\r\n\t\t\treturn DiffAlgorithmResult.trivial(seq1, seq2);\r\n\t\t}\r\n\r\n\t\tfunction getXAfterSnake(x: number, y: number): number {\r\n\t\t\twhile (x < seq1.length && y < seq2.length && seq1.getElement(x) === seq2.getElement(y)) {\r\n\t\t\t\tx++;\r\n\t\t\t\ty++;\r\n\t\t\t}\r\n\t\t\treturn x;\r\n\t\t}\r\n\r\n\t\tlet d = 0;\r\n\t\t// V[k]: X value of longest d-line that ends in diagonal k.\r\n\t\t// d-line: path from (0,0) to (x,y) that uses exactly d non-diagonals.\r\n\t\t// diagonal k: Set of points (x,y) with x-y = k.\r\n\t\tconst V = new FastInt32Array();\r\n\t\tV.set(0, getXAfterSnake(0, 0));\r\n\r\n\t\tconst paths = new FastArrayNegativeIndices<SnakePath | null>();\r\n\t\tpaths.set(0, V.get(0) === 0 ? null : new SnakePath(null, 0, 0, V.get(0)));\r\n\r\n\t\tlet k = 0;\r\n\r\n\t\tloop: while (true) {\r\n\t\t\td++;\r\n\t\t\tfor (k = -d; k <= d; k += 2) {\r\n\t\t\t\tif (!timeout.isValid()) {\r\n\t\t\t\t\treturn DiffAlgorithmResult.trivialTimedOut(seq1, seq2);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst maxXofDLineTop = k === d ? -1 : V.get(k + 1); // We take a vertical non-diagonal\r\n\t\t\t\tconst maxXofDLineLeft = k === -d ? -1 : V.get(k - 1) + 1; // We take a horizontal non-diagonal (+1 x)\r\n\t\t\t\tconst x = Math.min(Math.max(maxXofDLineTop, maxXofDLineLeft), seq1.length);\r\n\t\t\t\tconst y = x - k;\r\n\t\t\t\tconst newMaxX = getXAfterSnake(x, y);\r\n\t\t\t\tV.set(k, newMaxX);\r\n\t\t\t\tconst lastPath = x === maxXofDLineTop ? paths.get(k + 1) : paths.get(k - 1);\r\n\t\t\t\tpaths.set(k, newMaxX !== x ? new SnakePath(lastPath, x, y, newMaxX - x) : lastPath);\r\n\r\n\t\t\t\tif (V.get(k) === seq1.length && V.get(k) - k === seq2.length) {\r\n\t\t\t\t\tbreak loop;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet path = paths.get(k);\r\n\t\tconst result: SequenceDiff[] = [];\r\n\t\tlet lastAligningPosS1: number = seq1.length;\r\n\t\tlet lastAligningPosS2: number = seq2.length;\r\n\r\n\t\twhile (true) {\r\n\t\t\tconst endX = path ? path.x + path.length : 0;\r\n\t\t\tconst endY = path ? path.y + path.length : 0;\r\n\r\n\t\t\tif (endX !== lastAligningPosS1 || endY !== lastAligningPosS2) {\r\n\t\t\t\tresult.push(new SequenceDiff(\r\n\t\t\t\t\tnew OffsetRange(endX, lastAligningPosS1),\r\n\t\t\t\t\tnew OffsetRange(endY, lastAligningPosS2),\r\n\t\t\t\t));\r\n\t\t\t}\r\n\t\t\tif (!path) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tlastAligningPosS1 = path.x;\r\n\t\t\tlastAligningPosS2 = path.y;\r\n\r\n\t\t\tpath = path.prev;\r\n\t\t}\r\n\r\n\t\tresult.reverse();\r\n\t\treturn new DiffAlgorithmResult(result, false);\r\n\t}\r\n}\r\n\r\nclass SnakePath {\r\n\tconstructor(\r\n\t\tpublic readonly prev: SnakePath | null,\r\n\t\tpublic readonly x: number,\r\n\t\tpublic readonly y: number,\r\n\t\tpublic readonly length: number\r\n\t) {\r\n\t}\r\n}\r\n\r\n/**\r\n * An array that supports fast negative indices.\r\n*/\r\nclass FastInt32Array {\r\n\tprivate positiveArr: Int32Array = new Int32Array(10);\r\n\tprivate negativeArr: Int32Array = new Int32Array(10);\r\n\r\n\tget(idx: number): number {\r\n\t\tif (idx < 0) {\r\n\t\t\tidx = -idx - 1;\r\n\t\t\treturn this.negativeArr[idx];\r\n\t\t} else {\r\n\t\t\treturn this.positiveArr[idx];\r\n\t\t}\r\n\t}\r\n\r\n\tset(idx: number, value: number): void {\r\n\t\tif (idx < 0) {\r\n\t\t\tidx = -idx - 1;\r\n\t\t\tif (idx >= this.negativeArr.length) {\r\n\t\t\t\tconst arr = this.negativeArr;\r\n\t\t\t\tthis.negativeArr = new Int32Array(arr.length * 2);\r\n\t\t\t\tthis.negativeArr.set(arr);\r\n\t\t\t}\r\n\t\t\tthis.negativeArr[idx] = value;\r\n\t\t} else {\r\n\t\t\tif (idx >= this.positiveArr.length) {\r\n\t\t\t\tconst arr = this.positiveArr;\r\n\t\t\t\tthis.positiveArr = new Int32Array(arr.length * 2);\r\n\t\t\t\tthis.positiveArr.set(arr);\r\n\t\t\t}\r\n\t\t\tthis.positiveArr[idx] = value;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * An array that supports fast negative indices.\r\n*/\r\nclass FastArrayNegativeIndices<T> {\r\n\tprivate readonly positiveArr: T[] = [];\r\n\tprivate readonly negativeArr: T[] = [];\r\n\r\n\tget(idx: number): T {\r\n\t\tif (idx < 0) {\r\n\t\t\tidx = -idx - 1;\r\n\t\t\treturn this.negativeArr[idx];\r\n\t\t} else {\r\n\t\t\treturn this.positiveArr[idx];\r\n\t\t}\r\n\t}\r\n\r\n\tset(idx: number, value: T): void {\r\n\t\tif (idx < 0) {\r\n\t\t\tidx = -idx - 1;\r\n\t\t\tthis.negativeArr[idx] = value;\r\n\t\t} else {\r\n\t\t\tthis.positiveArr[idx] = value;\r\n\t\t}\r\n\t}\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport { LineRange } from '../../../../vs/editor/common/core/lineRange';\r\nimport { Range } from '../../../../vs/editor/common/core/range';\r\n\r\nexport interface ILinesDiffComputer {\r\n\tcomputeDiff(originalLines: string[], modifiedLines: string[], options: ILinesDiffComputerOptions): LinesDiff;\r\n}\r\n\r\nexport interface ILinesDiffComputerOptions {\r\n\treadonly ignoreTrimWhitespace: boolean;\r\n\treadonly maxComputationTimeMs: number;\r\n}\r\n\r\nexport class LinesDiff {\r\n\tconstructor(\r\n\t\treadonly changes: readonly LineRangeMapping[],\r\n\r\n\t\t/**\r\n\t\t * Indicates if the time out was reached.\r\n\t\t * In that case, the diffs might be an approximation and the user should be asked to rerun the diff with more time.\r\n\t\t */\r\n\t\treadonly hitTimeout: boolean,\r\n\t) {\r\n\t}\r\n}\r\n\r\n/**\r\n * Maps a line range in the original text model to a line range in the modified text model.\r\n */\r\nexport class LineRangeMapping {\r\n\t/**\r\n\t * The line range in the original text model.\r\n\t */\r\n\tpublic readonly originalRange: LineRange;\r\n\r\n\t/**\r\n\t * The line range in the modified text model.\r\n\t */\r\n\tpublic readonly modifiedRange: LineRange;\r\n\r\n\t/**\r\n\t * If inner changes have not been computed, this is set to undefined.\r\n\t * Otherwise, it represents the character-level diff in this line range.\r\n\t * The original range of each range mapping should be contained in the original line range (same for modified), exceptions are new-lines.\r\n\t * Must not be an empty array.\r\n\t */\r\n\tpublic readonly innerChanges: RangeMapping[] | undefined;\r\n\r\n\tconstructor(\r\n\t\toriginalRange: LineRange,\r\n\t\tmodifiedRange: LineRange,\r\n\t\tinnerChanges: RangeMapping[] | undefined,\r\n\t) {\r\n\t\tthis.originalRange = originalRange;\r\n\t\tthis.modifiedRange = modifiedRange;\r\n\t\tthis.innerChanges = innerChanges;\r\n\t}\r\n\r\n\tpublic toString(): string {\r\n\t\treturn `{${this.originalRange.toString()}->${this.modifiedRange.toString()}}`;\r\n\t}\r\n\r\n\tpublic get changedLineCount() {\r\n\t\treturn Math.max(this.originalRange.length, this.modifiedRange.length);\r\n\t}\r\n}\r\n\r\n/**\r\n * Maps a range in the original text model to a range in the modified text model.\r\n */\r\nexport class RangeMapping {\r\n\t/**\r\n\t * The original range.\r\n\t */\r\n\treadonly originalRange: Range;\r\n\r\n\t/**\r\n\t * The modified range.\r\n\t */\r\n\treadonly modifiedRange: Range;\r\n\r\n\tconstructor(\r\n\t\toriginalRange: Range,\r\n\r\n\t\tmodifiedRange: Range,\r\n\t) {\r\n\t\tthis.originalRange = originalRange;\r\n\t\tthis.modifiedRange = modifiedRange;\r\n\t}\r\n\r\n\tpublic toString(): string {\r\n\t\treturn `{${this.originalRange.toString()}->${this.modifiedRange.toString()}}`;\r\n\t}\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport { assertFn, checkAdjacentItems } from '../../../../vs/base/common/assert';\r\nimport { CharCode } from '../../../../vs/base/common/charCode';\r\nimport { LineRange } from '../../../../vs/editor/common/core/lineRange';\r\nimport { OffsetRange } from '../../../../vs/editor/common/core/offsetRange';\r\nimport { Position } from '../../../../vs/editor/common/core/position';\r\nimport { Range } from '../../../../vs/editor/common/core/range';\r\nimport { DateTimeout, ISequence, ITimeout, InfiniteTimeout, SequenceDiff } from '../../../../vs/editor/common/diff/algorithms/diffAlgorithm';\r\nimport { DynamicProgrammingDiffing } from '../../../../vs/editor/common/diff/algorithms/dynamicProgrammingDiffing';\r\nimport { optimizeSequenceDiffs, smoothenSequenceDiffs } from '../../../../vs/editor/common/diff/algorithms/joinSequenceDiffs';\r\nimport { MyersDiffAlgorithm } from '../../../../vs/editor/common/diff/algorithms/myersDiffAlgorithm';\r\nimport { ILinesDiffComputer, ILinesDiffComputerOptions, LineRangeMapping, LinesDiff, RangeMapping } from '../../../../vs/editor/common/diff/linesDiffComputer';\r\n\r\nexport class StandardLinesDiffComputer implements ILinesDiffComputer {\r\n\tprivate readonly dynamicProgrammingDiffing = new DynamicProgrammingDiffing();\r\n\tprivate readonly myersDiffingAlgorithm = new MyersDiffAlgorithm();\r\n\r\n\tcomputeDiff(originalLines: string[], modifiedLines: string[], options: ILinesDiffComputerOptions): LinesDiff {\r\n\t\tconst timeout = options.maxComputationTimeMs === 0 ? InfiniteTimeout.instance : new DateTimeout(options.maxComputationTimeMs);\r\n\t\tconst considerWhitespaceChanges = !options.ignoreTrimWhitespace;\r\n\r\n\t\tconst perfectHashes = new Map<string, number>();\r\n\t\tfunction getOrCreateHash(text: string): number {\r\n\t\t\tlet hash = perfectHashes.get(text);\r\n\t\t\tif (hash === undefined) {\r\n\t\t\t\thash = perfectHashes.size;\r\n\t\t\t\tperfectHashes.set(text, hash);\r\n\t\t\t}\r\n\t\t\treturn hash;\r\n\t\t}\r\n\r\n\t\tconst srcDocLines = originalLines.map((l) => getOrCreateHash(l.trim()));\r\n\t\tconst tgtDocLines = modifiedLines.map((l) => getOrCreateHash(l.trim()));\r\n\r\n\t\tconst sequence1 = new LineSequence(srcDocLines, originalLines);\r\n\t\tconst sequence2 = new LineSequence(tgtDocLines, modifiedLines);\r\n\r\n\t\tconst lineAlignmentResult = (() => {\r\n\t\t\tif (sequence1.length + sequence2.length < 1500) {\r\n\t\t\t\t// Use the improved algorithm for small files\r\n\t\t\t\treturn this.dynamicProgrammingDiffing.compute(\r\n\t\t\t\t\tsequence1,\r\n\t\t\t\t\tsequence2,\r\n\t\t\t\t\ttimeout,\r\n\t\t\t\t\t(offset1, offset2) =>\r\n\t\t\t\t\t\toriginalLines[offset1] === modifiedLines[offset2]\r\n\t\t\t\t\t\t\t? modifiedLines[offset2].length === 0\r\n\t\t\t\t\t\t\t\t? 0.1\r\n\t\t\t\t\t\t\t\t: 1 + Math.log(1 + modifiedLines[offset2].length)\r\n\t\t\t\t\t\t\t: 0.99\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\treturn this.myersDiffingAlgorithm.compute(\r\n\t\t\t\tsequence1,\r\n\t\t\t\tsequence2\r\n\t\t\t);\r\n\t\t})();\r\n\r\n\t\tlet lineAlignments = lineAlignmentResult.diffs;\r\n\t\tlet hitTimeout = lineAlignmentResult.hitTimeout;\r\n\t\tlineAlignments = optimizeSequenceDiffs(sequence1, sequence2, lineAlignments);\r\n\r\n\t\tconst alignments: RangeMapping[] = [];\r\n\r\n\t\tconst scanForWhitespaceChanges = (equalLinesCount: number) => {\r\n\t\t\tif (!considerWhitespaceChanges) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = 0; i < equalLinesCount; i++) {\r\n\t\t\t\tconst seq1Offset = seq1LastStart + i;\r\n\t\t\t\tconst seq2Offset = seq2LastStart + i;\r\n\t\t\t\tif (originalLines[seq1Offset] !== modifiedLines[seq2Offset]) {\r\n\t\t\t\t\t// This is because of whitespace changes, diff these lines\r\n\t\t\t\t\tconst characterDiffs = this.refineDiff(originalLines, modifiedLines, new SequenceDiff(\r\n\t\t\t\t\t\tnew OffsetRange(seq1Offset, seq1Offset + 1),\r\n\t\t\t\t\t\tnew OffsetRange(seq2Offset, seq2Offset + 1),\r\n\t\t\t\t\t), timeout, considerWhitespaceChanges);\r\n\t\t\t\t\tfor (const a of characterDiffs.mappings) {\r\n\t\t\t\t\t\talignments.push(a);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (characterDiffs.hitTimeout) {\r\n\t\t\t\t\t\thitTimeout = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tlet seq1LastStart = 0;\r\n\t\tlet seq2LastStart = 0;\r\n\r\n\t\tfor (const diff of lineAlignments) {\r\n\t\t\tassertFn(() => diff.seq1Range.start - seq1LastStart === diff.seq2Range.start - seq2LastStart);\r\n\r\n\t\t\tconst equalLinesCount = diff.seq1Range.start - seq1LastStart;\r\n\r\n\t\t\tscanForWhitespaceChanges(equalLinesCount);\r\n\r\n\t\t\tseq1LastStart = diff.seq1Range.endExclusive;\r\n\t\t\tseq2LastStart = diff.seq2Range.endExclusive;\r\n\r\n\t\t\tconst characterDiffs = this.refineDiff(originalLines, modifiedLines, diff, timeout, considerWhitespaceChanges);\r\n\t\t\tif (characterDiffs.hitTimeout) {\r\n\t\t\t\thitTimeout = true;\r\n\t\t\t}\r\n\t\t\tfor (const a of characterDiffs.mappings) {\r\n\t\t\t\talignments.push(a);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tscanForWhitespaceChanges(originalLines.length - seq1LastStart);\r\n\r\n\t\tconst changes = lineRangeMappingFromRangeMappings(alignments, originalLines, modifiedLines);\r\n\t\treturn new LinesDiff(changes, hitTimeout);\r\n\t}\r\n\r\n\tprivate refineDiff(originalLines: string[], modifiedLines: string[], diff: SequenceDiff, timeout: ITimeout, considerWhitespaceChanges: boolean): { mappings: RangeMapping[]; hitTimeout: boolean } {\r\n\t\tconst sourceSlice = new Slice(originalLines, diff.seq1Range, considerWhitespaceChanges);\r\n\t\tconst targetSlice = new Slice(modifiedLines, diff.seq2Range, considerWhitespaceChanges);\r\n\r\n\t\tconst diffResult = sourceSlice.length + targetSlice.length < 500\r\n\t\t\t? this.dynamicProgrammingDiffing.compute(sourceSlice, targetSlice, timeout)\r\n\t\t\t: this.myersDiffingAlgorithm.compute(sourceSlice, targetSlice, timeout);\r\n\r\n\t\tlet diffs = diffResult.diffs;\r\n\t\tdiffs = optimizeSequenceDiffs(sourceSlice, targetSlice, diffs);\r\n\t\tdiffs = coverFullWords(sourceSlice, targetSlice, diffs);\r\n\t\tdiffs = smoothenSequenceDiffs(sourceSlice, targetSlice, diffs);\r\n\r\n\t\tconst result = diffs.map(\r\n\t\t\t(d) =>\r\n\t\t\t\tnew RangeMapping(\r\n\t\t\t\t\tsourceSlice.translateRange(d.seq1Range),\r\n\t\t\t\t\ttargetSlice.translateRange(d.seq2Range)\r\n\t\t\t\t)\r\n\t\t);\r\n\r\n\t\t// Assert: result applied on original should be the same as diff applied to original\r\n\r\n\t\treturn {\r\n\t\t\tmappings: result,\r\n\t\t\thitTimeout: diffResult.hitTimeout,\r\n\t\t};\r\n\t}\r\n}\r\n\r\nfunction coverFullWords(sequence1: Slice, sequence2: Slice, sequenceDiffs: SequenceDiff[]): SequenceDiff[] {\r\n\tconst additional: SequenceDiff[] = [];\r\n\r\n\tlet lastModifiedWord: { added: number; deleted: number; count: number; s1Range: OffsetRange; s2Range: OffsetRange } | undefined = undefined;\r\n\r\n\tfunction maybePushWordToAdditional() {\r\n\t\tif (!lastModifiedWord) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst originalLength1 = lastModifiedWord.s1Range.length - lastModifiedWord.deleted;\r\n\t\tconst originalLength2 = lastModifiedWord.s2Range.length - lastModifiedWord.added;\r\n\t\tif (originalLength1 !== originalLength2) {\r\n\t\t\t// TODO figure out why this happens\r\n\t\t}\r\n\r\n\t\tif (Math.max(lastModifiedWord.deleted, lastModifiedWord.added) + (lastModifiedWord.count - 1) > originalLength1) {\r\n\t\t\tadditional.push(new SequenceDiff(lastModifiedWord.s1Range, lastModifiedWord.s2Range));\r\n\t\t}\r\n\r\n\t\tlastModifiedWord = undefined;\r\n\t}\r\n\r\n\tfor (const s of sequenceDiffs) {\r\n\t\tfunction processWord(s1Range: OffsetRange, s2Range: OffsetRange) {\r\n\t\t\tif (!lastModifiedWord || !lastModifiedWord.s1Range.containsRange(s1Range) || !lastModifiedWord.s2Range.containsRange(s2Range)) {\r\n\t\t\t\tif (lastModifiedWord && !(lastModifiedWord.s1Range.endExclusive < s1Range.start && lastModifiedWord.s2Range.endExclusive < s2Range.start)) {\r\n\t\t\t\t\tconst s1Added = OffsetRange.tryCreate(lastModifiedWord.s1Range.endExclusive, s1Range.start);\r\n\t\t\t\t\tconst s2Added = OffsetRange.tryCreate(lastModifiedWord.s2Range.endExclusive, s2Range.start);\r\n\t\t\t\t\tlastModifiedWord.deleted += s1Added?.length ?? 0;\r\n\t\t\t\t\tlastModifiedWord.added += s2Added?.length ?? 0;\r\n\r\n\t\t\t\t\tlastModifiedWord.s1Range = lastModifiedWord.s1Range.join(s1Range);\r\n\t\t\t\t\tlastModifiedWord.s2Range = lastModifiedWord.s2Range.join(s2Range);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmaybePushWordToAdditional();\r\n\t\t\t\t\tlastModifiedWord = { added: 0, deleted: 0, count: 0, s1Range: s1Range, s2Range: s2Range };\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst changedS1 = s1Range.intersect(s.seq1Range);\r\n\t\t\tconst changedS2 = s2Range.intersect(s.seq2Range);\r\n\t\t\tlastModifiedWord.count++;\r\n\t\t\tlastModifiedWord.deleted += changedS1?.length ?? 0;\r\n\t\t\tlastModifiedWord.added += changedS2?.length ?? 0;\r\n\t\t}\r\n\r\n\t\tconst w1Before = sequence1.findWordContaining(s.seq1Range.start - 1);\r\n\t\tconst w2Before = sequence2.findWordContaining(s.seq2Range.start - 1);\r\n\r\n\t\tconst w1After = sequence1.findWordContaining(s.seq1Range.endExclusive);\r\n\t\tconst w2After = sequence2.findWordContaining(s.seq2Range.endExclusive);\r\n\r\n\t\tif (w1Before && w1After && w2Before && w2After && w1Before.equals(w1After) && w2Before.equals(w2After)) {\r\n\t\t\tprocessWord(w1Before, w2Before);\r\n\t\t} else {\r\n\t\t\tif (w1Before && w2Before) {\r\n\t\t\t\tprocessWord(w1Before, w2Before);\r\n\t\t\t}\r\n\t\t\tif (w1After && w2After) {\r\n\t\t\t\tprocessWord(w1After, w2After);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tmaybePushWordToAdditional();\r\n\r\n\tconst merged = mergeSequenceDiffs(sequenceDiffs, additional);\r\n\treturn merged;\r\n}\r\n\r\nfunction mergeSequenceDiffs(sequenceDiffs1: SequenceDiff[], sequenceDiffs2: SequenceDiff[]): SequenceDiff[] {\r\n\tconst result: SequenceDiff[] = [];\r\n\r\n\twhile (sequenceDiffs1.length > 0 || sequenceDiffs2.length > 0) {\r\n\t\tconst sd1 = sequenceDiffs1[0];\r\n\t\tconst sd2 = sequenceDiffs2[0];\r\n\r\n\t\tlet next: SequenceDiff;\r\n\t\tif (sd1 && (!sd2 || sd1.seq1Range.start < sd2.seq1Range.start)) {\r\n\t\t\tnext = sequenceDiffs1.shift()!;\r\n\t\t} else {\r\n\t\t\tnext = sequenceDiffs2.shift()!;\r\n\t\t}\r\n\r\n\t\tif (result.length > 0 && result[result.length - 1].seq1Range.endExclusive >= next.seq1Range.start) {\r\n\t\t\tresult[result.length - 1] = result[result.length - 1].join(next);\r\n\t\t} else {\r\n\t\t\tresult.push(next);\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nexport function lineRangeMappingFromRangeMappings(alignments: RangeMapping[], originalLines: string[], modifiedLines: string[]): LineRangeMapping[] {\r\n\tconst changes: LineRangeMapping[] = [];\r\n\tfor (const g of group(\r\n\t\talignments.map(a => getLineRangeMapping(a, originalLines, modifiedLines)),\r\n\t\t(a1, a2) =>\r\n\t\t\ta1.originalRange.overlapOrTouch(a2.originalRange)\r\n\t\t\t|| a1.modifiedRange.overlapOrTouch(a2.modifiedRange)\r\n\t)) {\r\n\t\tconst first = g[0];\r\n\t\tconst last = g[g.length - 1];\r\n\r\n\t\tchanges.push(new LineRangeMapping(\r\n\t\t\tfirst.originalRange.join(last.originalRange),\r\n\t\t\tfirst.modifiedRange.join(last.modifiedRange),\r\n\t\t\tg.map(a => a.innerChanges![0]),\r\n\t\t));\r\n\t}\r\n\r\n\tassertFn(() => {\r\n\t\treturn checkAdjacentItems(changes,\r\n\t\t\t(m1, m2) => m2.originalRange.startLineNumber - m1.originalRange.endLineNumberExclusive === m2.modifiedRange.startLineNumber - m1.modifiedRange.endLineNumberExclusive &&\r\n\t\t\t\t// There has to be an unchanged line in between (otherwise both diffs should have been joined)\r\n\t\t\t\tm1.originalRange.endLineNumberExclusive < m2.originalRange.startLineNumber &&\r\n\t\t\t\tm1.modifiedRange.endLineNumberExclusive < m2.modifiedRange.startLineNumber,\r\n\t\t);\r\n\t});\r\n\r\n\treturn changes;\r\n}\r\n\r\nexport function getLineRangeMapping(rangeMapping: RangeMapping, originalLines: string[], modifiedLines: string[]): LineRangeMapping {\r\n\tlet lineStartDelta = 0;\r\n\tlet lineEndDelta = 0;\r\n\r\n\t// rangeMapping describes the edit that replaces `rangeMapping.originalRange` with `newText := getText(modifiedLines, rangeMapping.modifiedRange)`.\r\n\r\n\t// original: xxx[ \\n <- this line is not modified\r\n\t// modified: xxx[ \\n\r\n\tif (rangeMapping.modifiedRange.startColumn - 1 >= modifiedLines[rangeMapping.modifiedRange.startLineNumber - 1].length\r\n\t\t&& rangeMapping.originalRange.startColumn - 1 >= originalLines[rangeMapping.originalRange.startLineNumber - 1].length) {\r\n\t\tlineStartDelta = 1; // +1 is always possible, as startLineNumber < endLineNumber + 1\r\n\t}\r\n\r\n\t// original: ]xxx \\n <- this line is not modified\r\n\t// modified: ]xx  \\n\r\n\tif (rangeMapping.modifiedRange.endColumn === 1 && rangeMapping.originalRange.endColumn === 1\r\n\t\t&& rangeMapping.originalRange.startLineNumber + lineStartDelta <= rangeMapping.originalRange.endLineNumber\r\n\t\t&& rangeMapping.modifiedRange.startLineNumber + lineStartDelta <= rangeMapping.modifiedRange.endLineNumber) {\r\n\t\tlineEndDelta = -1; // We can only do this if the range is not empty yet\r\n\t}\r\n\r\n\tconst originalLineRange = new LineRange(\r\n\t\trangeMapping.originalRange.startLineNumber + lineStartDelta,\r\n\t\trangeMapping.originalRange.endLineNumber + 1 + lineEndDelta\r\n\t);\r\n\tconst modifiedLineRange = new LineRange(\r\n\t\trangeMapping.modifiedRange.startLineNumber + lineStartDelta,\r\n\t\trangeMapping.modifiedRange.endLineNumber + 1 + lineEndDelta\r\n\t);\r\n\r\n\treturn new LineRangeMapping(originalLineRange, modifiedLineRange, [rangeMapping]);\r\n}\r\n\r\nfunction* group<T>(items: Iterable<T>, shouldBeGrouped: (item1: T, item2: T) => boolean): Iterable<T[]> {\r\n\tlet currentGroup: T[] | undefined;\r\n\tlet last: T | undefined;\r\n\tfor (const item of items) {\r\n\t\tif (last !== undefined && shouldBeGrouped(last, item)) {\r\n\t\t\tcurrentGroup!.push(item);\r\n\t\t} else {\r\n\t\t\tif (currentGroup) {\r\n\t\t\t\tyield currentGroup;\r\n\t\t\t}\r\n\t\t\tcurrentGroup = [item];\r\n\t\t}\r\n\t\tlast = item;\r\n\t}\r\n\tif (currentGroup) {\r\n\t\tyield currentGroup;\r\n\t}\r\n}\r\n\r\nexport class LineSequence implements ISequence {\r\n\tconstructor(\r\n\t\tprivate readonly trimmedHash: number[],\r\n\t\tprivate readonly lines: string[]\r\n\t) { }\r\n\r\n\tgetElement(offset: number): number {\r\n\t\treturn this.trimmedHash[offset];\r\n\t}\r\n\r\n\tget length(): number {\r\n\t\treturn this.trimmedHash.length;\r\n\t}\r\n\r\n\tgetBoundaryScore(length: number): number {\r\n\t\tconst indentationBefore = length === 0 ? 0 : getIndentation(this.lines[length - 1]);\r\n\t\tconst indentationAfter = length === this.lines.length ? 0 : getIndentation(this.lines[length]);\r\n\t\treturn 1000 - (indentationBefore + indentationAfter);\r\n\t}\r\n}\r\n\r\nfunction getIndentation(str: string): number {\r\n\tlet i = 0;\r\n\twhile (i < str.length && (str.charCodeAt(i) === CharCode.Space || str.charCodeAt(i) === CharCode.Tab)) {\r\n\t\ti++;\r\n\t}\r\n\treturn i;\r\n}\r\n\r\nclass Slice implements ISequence {\r\n\tprivate readonly elements: number[] = [];\r\n\tprivate readonly firstCharOffsetByLineMinusOne: number[] = [];\r\n\tpublic readonly lineRange: OffsetRange;\r\n\t// To account for trimming\r\n\tprivate readonly offsetByLine: number[] = [];\r\n\r\n\tconstructor(public readonly lines: string[], lineRange: OffsetRange, public readonly considerWhitespaceChanges: boolean) {\r\n\t\t// This slice has to have lineRange.length many \\n! (otherwise diffing against an empty slice will be problematic)\r\n\t\t// (Unless it covers the entire document, in that case the other slice also has to cover the entire document ands it's okay)\r\n\r\n\t\t// If the slice covers the end, but does not start at the beginning, we include just the \\n of the previous line.\r\n\t\tlet trimFirstLineFully = false;\r\n\t\tif (lineRange.start > 0 && lineRange.endExclusive >= lines.length) {\r\n\t\t\tlineRange = new OffsetRange(lineRange.start - 1, lineRange.endExclusive);\r\n\t\t\ttrimFirstLineFully = true;\r\n\t\t}\r\n\r\n\t\tthis.lineRange = lineRange;\r\n\r\n\t\tfor (let i = this.lineRange.start; i < this.lineRange.endExclusive; i++) {\r\n\t\t\tlet line = lines[i];\r\n\t\t\tlet offset = 0;\r\n\t\t\tif (trimFirstLineFully) {\r\n\t\t\t\toffset = line.length;\r\n\t\t\t\tline = '';\r\n\t\t\t\ttrimFirstLineFully = false;\r\n\t\t\t} else if (!considerWhitespaceChanges) {\r\n\t\t\t\tconst trimmedStartLine = line.trimStart();\r\n\t\t\t\toffset = line.length - trimmedStartLine.length;\r\n\t\t\t\tline = trimmedStartLine.trimEnd();\r\n\t\t\t}\r\n\r\n\t\t\tthis.offsetByLine.push(offset);\r\n\r\n\t\t\tfor (let i = 0; i < line.length; i++) {\r\n\t\t\t\tthis.elements.push(line.charCodeAt(i));\r\n\t\t\t}\r\n\r\n\t\t\t// Don't add an \\n that does not exist in the document.\r\n\t\t\tif (i < lines.length - 1) {\r\n\t\t\t\tthis.elements.push('\\n'.charCodeAt(0));\r\n\t\t\t\tthis.firstCharOffsetByLineMinusOne[i - this.lineRange.start] = this.elements.length;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// To account for the last line\r\n\t\tthis.offsetByLine.push(0);\r\n\t}\r\n\r\n\ttoString() {\r\n\t\treturn `Slice: \"${this.text}\"`;\r\n\t}\r\n\r\n\tget text(): string {\r\n\t\treturn [...this.elements].map(e => String.fromCharCode(e)).join('');\r\n\t}\r\n\r\n\tgetElement(offset: number): number {\r\n\t\treturn this.elements[offset];\r\n\t}\r\n\r\n\tget length(): number {\r\n\t\treturn this.elements.length;\r\n\t}\r\n\r\n\tpublic getBoundaryScore(length: number): number {\r\n\t\t//   a   b   c   ,           d   e   f\r\n\t\t// 11  0   0   12  15  6   13  0   0   11\r\n\r\n\t\tconst prevCategory = getCategory(length > 0 ? this.elements[length - 1] : -1);\r\n\t\tconst nextCategory = getCategory(length < this.elements.length ? this.elements[length] : -1);\r\n\r\n\t\tif (prevCategory === CharBoundaryCategory.LineBreakCR && nextCategory === CharBoundaryCategory.LineBreakLF) {\r\n\t\t\t// don't break between \\r and \\n\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tlet score = 0;\r\n\t\tif (prevCategory !== nextCategory) {\r\n\t\t\tscore += 10;\r\n\t\t\tif (nextCategory === CharBoundaryCategory.WordUpper) {\r\n\t\t\t\tscore += 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tscore += getCategoryBoundaryScore(prevCategory);\r\n\t\tscore += getCategoryBoundaryScore(nextCategory);\r\n\r\n\t\treturn score;\r\n\t}\r\n\r\n\tpublic translateOffset(offset: number): Position {\r\n\t\t// find smallest i, so that lineBreakOffsets[i] <= offset using binary search\r\n\t\tif (this.lineRange.isEmpty) {\r\n\t\t\treturn new Position(this.lineRange.start + 1, 1);\r\n\t\t}\r\n\r\n\t\tlet i = 0;\r\n\t\tlet j = this.firstCharOffsetByLineMinusOne.length;\r\n\t\twhile (i < j) {\r\n\t\t\tconst k = Math.floor((i + j) / 2);\r\n\t\t\tif (this.firstCharOffsetByLineMinusOne[k] > offset) {\r\n\t\t\t\tj = k;\r\n\t\t\t} else {\r\n\t\t\t\ti = k + 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst offsetOfPrevLineBreak = i === 0 ? 0 : this.firstCharOffsetByLineMinusOne[i - 1];\r\n\t\treturn new Position(this.lineRange.start + i + 1, offset - offsetOfPrevLineBreak + 1 + this.offsetByLine[i]);\r\n\t}\r\n\r\n\tpublic translateRange(range: OffsetRange): Range {\r\n\t\treturn Range.fromPositions(this.translateOffset(range.start), this.translateOffset(range.endExclusive));\r\n\t}\r\n\r\n\t/**\r\n\t * Finds the word that contains the character at the given offset\r\n\t */\r\n\tpublic findWordContaining(offset: number): OffsetRange | undefined {\r\n\t\tif (offset < 0 || offset >= this.elements.length) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\tif (!isWordChar(this.elements[offset])) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\t// find start\r\n\t\tlet start = offset;\r\n\t\twhile (start > 0 && isWordChar(this.elements[start - 1])) {\r\n\t\t\tstart--;\r\n\t\t}\r\n\r\n\t\t// find end\r\n\t\tlet end = offset;\r\n\t\twhile (end < this.elements.length && isWordChar(this.elements[end])) {\r\n\t\t\tend++;\r\n\t\t}\r\n\r\n\t\treturn new OffsetRange(start, end);\r\n\t}\r\n}\r\n\r\nfunction isWordChar(charCode: number): boolean {\r\n\treturn charCode >= CharCode.a && charCode <= CharCode.z\r\n\t\t|| charCode >= CharCode.A && charCode <= CharCode.Z\r\n\t\t|| charCode >= CharCode.Digit0 && charCode <= CharCode.Digit9;\r\n}\r\n\r\nconst enum CharBoundaryCategory {\r\n\tWordLower,\r\n\tWordUpper,\r\n\tWordNumber,\r\n\tEnd,\r\n\tOther,\r\n\tSpace,\r\n\tLineBreakCR,\r\n\tLineBreakLF,\r\n}\r\n\r\nconst score: Record<CharBoundaryCategory, number> = {\r\n\t[CharBoundaryCategory.WordLower]: 0,\r\n\t[CharBoundaryCategory.WordUpper]: 0,\r\n\t[CharBoundaryCategory.WordNumber]: 0,\r\n\t[CharBoundaryCategory.End]: 10,\r\n\t[CharBoundaryCategory.Other]: 2,\r\n\t[CharBoundaryCategory.Space]: 3,\r\n\t[CharBoundaryCategory.LineBreakCR]: 10,\r\n\t[CharBoundaryCategory.LineBreakLF]: 10,\r\n};\r\n\r\nfunction getCategoryBoundaryScore(category: CharBoundaryCategory): number {\r\n\treturn score[category];\r\n}\r\n\r\nfunction getCategory(charCode: number): CharBoundaryCategory {\r\n\tif (charCode === CharCode.LineFeed) {\r\n\t\treturn CharBoundaryCategory.LineBreakLF;\r\n\t} else if (charCode === CharCode.CarriageReturn) {\r\n\t\treturn CharBoundaryCategory.LineBreakCR;\r\n\t} else if (isSpace(charCode)) {\r\n\t\treturn CharBoundaryCategory.Space;\r\n\t} else if (charCode >= CharCode.a && charCode <= CharCode.z) {\r\n\t\treturn CharBoundaryCategory.WordLower;\r\n\t} else if (charCode >= CharCode.A && charCode <= CharCode.Z) {\r\n\t\treturn CharBoundaryCategory.WordUpper;\r\n\t} else if (charCode >= CharCode.Digit0 && charCode <= CharCode.Digit9) {\r\n\t\treturn CharBoundaryCategory.WordNumber;\r\n\t} else if (charCode === -1) {\r\n\t\treturn CharBoundaryCategory.End;\r\n\t} else {\r\n\t\treturn CharBoundaryCategory.Other;\r\n\t}\r\n}\r\n\r\nfunction isSpace(charCode: number): boolean {\r\n\treturn charCode === CharCode.Space || charCode === CharCode.Tab;\r\n}\r\n","import {ILinesDiffComputerOptions} from \"vs/editor/common/diff/linesDiffComputer\";\r\nimport {StandardLinesDiffComputer} from \"vs/editor/common/diff/standardLinesDiffComputer\";\r\n\r\nexport function computeDiff(originalLines: string[], modifiedLines: string[], options: ILinesDiffComputerOptions) {\r\n    let diffComputer = new StandardLinesDiffComputer();\r\n    return diffComputer.computeDiff(originalLines, modifiedLines, options)?.changes.map((changes) => {\r\n        let originalStartLineNumber;\r\n        let originalEndLineNumber;\r\n        let modifiedStartLineNumber;\r\n        let modifiedEndLineNumber;\r\n        let innerChanges = changes.innerChanges;\r\n        \r\n        originalStartLineNumber = changes.originalRange.startLineNumber - 1;\r\n        originalEndLineNumber = changes.originalRange.endLineNumberExclusive - 1;\r\n        modifiedStartLineNumber = changes.modifiedRange.startLineNumber - 1;\r\n        modifiedEndLineNumber = changes.modifiedRange.endLineNumberExclusive - 1;\r\n        return {\r\n            origStart: originalStartLineNumber,\r\n            origEnd: originalEndLineNumber,\r\n            editStart: modifiedStartLineNumber,\r\n            editEnd: modifiedEndLineNumber,\r\n            charChanges: innerChanges?.map(m => ({\r\n                originalStartLineNumber: m.originalRange.startLineNumber - 1,\r\n                originalStartColumn: m.originalRange.startColumn - 1,\r\n                originalEndLineNumber: m.originalRange.endLineNumber - 1,\r\n                originalEndColumn: m.originalRange.endColumn - 1,\r\n                modifiedStartLineNumber: m.modifiedRange.startLineNumber - 1,\r\n                modifiedStartColumn: m.modifiedRange.startColumn - 1,\r\n                modifiedEndLineNumber: m.modifiedRange.endLineNumber - 1,\r\n                modifiedEndColumn: m.modifiedRange.endColumn - 1,\r\n            }))\r\n        };\r\n    });\r\n}\r\n"],"names":["ErrorHandler","addListener","listener","listeners","push","_removeListener","emit","e","forEach","splice","indexOf","setUnexpectedErrorHandler","newUnexpectedErrorHandler","unexpectedErrorHandler","getUnexpectedErrorHandler","onUnexpectedError","onUnexpectedExternalError","constructor","setTimeout","stack","ErrorNoTelemetry","isErrorNoTelemetry","message","Error","errorHandler","isSigPipeError","cast","code","syscall","toUpperCase","isCancellationError","undefined","transformErrorForSerialization","error","name","stacktrace","$isError","noTelemetry","canceledName","CancellationError","canceled","illegalArgument","illegalState","readonly","disposed","what","result","getErrorMessage","err","split","String","NotImplementedError","NotSupportedError","ExpectedError","isExpected","fromError","msg","BugIndicatingError","Object","setPrototypeOf","prototype","ok","value","assertNever","assert","condition","assertFn","checkAdjacentItems","items","predicate","i","length","a","b","CharCode","Null","Backspace","Tab","LineFeed","CarriageReturn","Space","ExclamationMark","DoubleQuote","Hash","DollarSign","PercentSign","Ampersand","SingleQuote","OpenParen","CloseParen","Asterisk","Plus","Comma","Dash","Period","Slash","Digit0","Digit1","Digit2","Digit3","Digit4","Digit5","Digit6","Digit7","Digit8","Digit9","Colon","Semicolon","LessThan","Equals","GreaterThan","QuestionMark","AtSign","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","OpenSquareBracket","Backslash","CloseSquareBracket","Caret","Underline","BackTick","c","d","f","g","h","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","OpenCurlyBrace","Pipe","CloseCurlyBrace","Tilde","NoBreakSpace","U_Combining_Grave_Accent","U_Combining_Acute_Accent","U_Combining_Circumflex_Accent","U_Combining_Tilde","U_Combining_Macron","U_Combining_Overline","U_Combining_Breve","U_Combining_Dot_Above","U_Combining_Diaeresis","U_Combining_Hook_Above","U_Combining_Ring_Above","U_Combining_Double_Acute_Accent","U_Combining_Caron","U_Combining_Vertical_Line_Above","U_Combining_Double_Vertical_Line_Above","U_Combining_Double_Grave_Accent","U_Combining_Candrabindu","U_Combining_Inverted_Breve","U_Combining_Turned_Comma_Above","U_Combining_Comma_Above","U_Combining_Reversed_Comma_Above","U_Combining_Comma_Above_Right","U_Combining_Grave_Accent_Below","U_Combining_Acute_Accent_Below","U_Combining_Left_Tack_Below","U_Combining_Right_Tack_Below","U_Combining_Left_Angle_Above","U_Combining_Horn","U_Combining_Left_Half_Ring_Below","U_Combining_Up_Tack_Below","U_Combining_Down_Tack_Below","U_Combining_Plus_Sign_Below","U_Combining_Minus_Sign_Below","U_Combining_Palatalized_Hook_Below","U_Combining_Retroflex_Hook_Below","U_Combining_Dot_Below","U_Combining_Diaeresis_Below","U_Combining_Ring_Below","U_Combining_Comma_Below","U_Combining_Cedilla","U_Combining_Ogonek","U_Combining_Vertical_Line_Below","U_Combining_Bridge_Below","U_Combining_Inverted_Double_Arch_Below","U_Combining_Caron_Below","U_Combining_Circumflex_Accent_Below","U_Combining_Breve_Below","U_Combining_Inverted_Breve_Below","U_Combining_Tilde_Below","U_Combining_Macron_Below","U_Combining_Low_Line","U_Combining_Double_Low_Line","U_Combining_Tilde_Overlay","U_Combining_Short_Stroke_Overlay","U_Combining_Long_Stroke_Overlay","U_Combining_Short_Solidus_Overlay","U_Combining_Long_Solidus_Overlay","U_Combining_Right_Half_Ring_Below","U_Combining_Inverted_Bridge_Below","U_Combining_Square_Below","U_Combining_Seagull_Below","U_Combining_X_Above","U_Combining_Vertical_Tilde","U_Combining_Double_Overline","U_Combining_Grave_Tone_Mark","U_Combining_Acute_Tone_Mark","U_Combining_Greek_Perispomeni","U_Combining_Greek_Koronis","U_Combining_Greek_Dialytika_Tonos","U_Combining_Greek_Ypogegrammeni","U_Combining_Bridge_Above","U_Combining_Equals_Sign_Below","U_Combining_Double_Vertical_Line_Below","U_Combining_Left_Angle_Below","U_Combining_Not_Tilde_Above","U_Combining_Homothetic_Above","U_Combining_Almost_Equal_To_Above","U_Combining_Left_Right_Arrow_Below","U_Combining_Upwards_Arrow_Below","U_Combining_Grapheme_Joiner","U_Combining_Right_Arrowhead_Above","U_Combining_Left_Half_Ring_Above","U_Combining_Fermata","U_Combining_X_Below","U_Combining_Left_Arrowhead_Below","U_Combining_Right_Arrowhead_Below","U_Combining_Right_Arrowhead_And_Up_Arrowhead_Below","U_Combining_Right_Half_Ring_Above","U_Combining_Dot_Above_Right","U_Combining_Asterisk_Below","U_Combining_Double_Ring_Below","U_Combining_Zigzag_Above","U_Combining_Double_Breve_Below","U_Combining_Double_Breve","U_Combining_Double_Macron","U_Combining_Double_Macron_Below","U_Combining_Double_Tilde","U_Combining_Double_Inverted_Breve","U_Combining_Double_Rightwards_Arrow_Below","U_Combining_Latin_Small_Letter_A","U_Combining_Latin_Small_Letter_E","U_Combining_Latin_Small_Letter_I","U_Combining_Latin_Small_Letter_O","U_Combining_Latin_Small_Letter_U","U_Combining_Latin_Small_Letter_C","U_Combining_Latin_Small_Letter_D","U_Combining_Latin_Small_Letter_H","U_Combining_Latin_Small_Letter_M","U_Combining_Latin_Small_Letter_R","U_Combining_Latin_Small_Letter_T","U_Combining_Latin_Small_Letter_V","U_Combining_Latin_Small_Letter_X","LINE_SEPARATOR","PARAGRAPH_SEPARATOR","NEXT_LINE","U_CIRCUMFLEX","U_GRAVE_ACCENT","U_DIAERESIS","U_MACRON","U_ACUTE_ACCENT","U_CEDILLA","U_MODIFIER_LETTER_LEFT_ARROWHEAD","U_MODIFIER_LETTER_RIGHT_ARROWHEAD","U_MODIFIER_LETTER_UP_ARROWHEAD","U_MODIFIER_LETTER_DOWN_ARROWHEAD","U_MODIFIER_LETTER_CENTRED_RIGHT_HALF_RING","U_MODIFIER_LETTER_CENTRED_LEFT_HALF_RING","U_MODIFIER_LETTER_UP_TACK","U_MODIFIER_LETTER_DOWN_TACK","U_MODIFIER_LETTER_PLUS_SIGN","U_MODIFIER_LETTER_MINUS_SIGN","U_BREVE","U_DOT_ABOVE","U_RING_ABOVE","U_OGONEK","U_SMALL_TILDE","U_DOUBLE_ACUTE_ACCENT","U_MODIFIER_LETTER_RHOTIC_HOOK","U_MODIFIER_LETTER_CROSS_ACCENT","U_MODIFIER_LETTER_EXTRA_HIGH_TONE_BAR","U_MODIFIER_LETTER_HIGH_TONE_BAR","U_MODIFIER_LETTER_MID_TONE_BAR","U_MODIFIER_LETTER_LOW_TONE_BAR","U_MODIFIER_LETTER_EXTRA_LOW_TONE_BAR","U_MODIFIER_LETTER_YIN_DEPARTING_TONE_MARK","U_MODIFIER_LETTER_YANG_DEPARTING_TONE_MARK","U_MODIFIER_LETTER_UNASPIRATED","U_MODIFIER_LETTER_LOW_DOWN_ARROWHEAD","U_MODIFIER_LETTER_LOW_UP_ARROWHEAD","U_MODIFIER_LETTER_LOW_LEFT_ARROWHEAD","U_MODIFIER_LETTER_LOW_RIGHT_ARROWHEAD","U_MODIFIER_LETTER_LOW_RING","U_MODIFIER_LETTER_MIDDLE_GRAVE_ACCENT","U_MODIFIER_LETTER_MIDDLE_DOUBLE_GRAVE_ACCENT","U_MODIFIER_LETTER_MIDDLE_DOUBLE_ACUTE_ACCENT","U_MODIFIER_LETTER_LOW_TILDE","U_MODIFIER_LETTER_RAISED_COLON","U_MODIFIER_LETTER_BEGIN_HIGH_TONE","U_MODIFIER_LETTER_END_HIGH_TONE","U_MODIFIER_LETTER_BEGIN_LOW_TONE","U_MODIFIER_LETTER_END_LOW_TONE","U_MODIFIER_LETTER_SHELF","U_MODIFIER_LETTER_OPEN_SHELF","U_MODIFIER_LETTER_LOW_LEFT_ARROW","U_GREEK_LOWER_NUMERAL_SIGN","U_GREEK_TONOS","U_GREEK_DIALYTIKA_TONOS","U_GREEK_KORONIS","U_GREEK_PSILI","U_GREEK_PERISPOMENI","U_GREEK_DIALYTIKA_AND_PERISPOMENI","U_GREEK_PSILI_AND_VARIA","U_GREEK_PSILI_AND_OXIA","U_GREEK_PSILI_AND_PERISPOMENI","U_GREEK_DASIA_AND_VARIA","U_GREEK_DASIA_AND_OXIA","U_GREEK_DASIA_AND_PERISPOMENI","U_GREEK_DIALYTIKA_AND_VARIA","U_GREEK_DIALYTIKA_AND_OXIA","U_GREEK_VARIA","U_GREEK_OXIA","U_GREEK_DASIA","U_IDEOGRAPHIC_FULL_STOP","U_LEFT_CORNER_BRACKET","U_RIGHT_CORNER_BRACKET","U_LEFT_BLACK_LENTICULAR_BRACKET","U_RIGHT_BLACK_LENTICULAR_BRACKET","U_OVERLINE","UTF8_BOM","U_FULLWIDTH_SEMICOLON","U_FULLWIDTH_COMMA","LineRange","joinMany","lineRanges","join","lineRanges1","lineRanges2","i1","i2","current","next","lineRange1","lineRange2","startLineNumber","endLineNumberExclusive","Math","max","contains","lineNumber","isEmpty","delta","offset","other","min","toString","intersect","overlapOrTouch","equals","OffsetRange","addRange","range","sortedRanges","endExclusive","start","end","tryCreate","containsRange","Position","with","newLineNumber","newColumn","column","deltaLineNumber","deltaColumn","isBefore","isBeforeOrEqual","compare","aLineNumber","bLineNumber","aColumn","bColumn","clone","lift","pos","isIPosition","obj","Range","endLineNumber","startColumn","endColumn","containsPosition","position","strictContainsPosition","otherRange","strictContainsRange","plusRange","intersectRanges","resultStartLineNumber","resultStartColumn","resultEndLineNumber","resultEndColumn","otherStartLineNumber","otherStartColumn","otherEndLineNumber","otherEndColumn","equalsRange","getEndPosition","getStartPosition","setEndPosition","setStartPosition","collapseToStart","collapseToEnd","lineCount","fromPositions","isIRange","areIntersectingOrTouching","areIntersecting","compareRangesUsingStarts","aStartLineNumber","bStartLineNumber","aStartColumn","bStartColumn","aEndLineNumber","bEndLineNumber","aEndColumn","bEndColumn","aExists","bExists","compareRangesUsingEnds","spansMultipleLines","toJSON","DiffAlgorithmResult","trivial","seq1","seq2","SequenceDiff","trivialTimedOut","diffs","hitTimeout","reverse","seq2Range","seq1Range","InfiniteTimeout","isValid","instance","DateTimeout","valid","Date","now","startTime","timeout","disable","Number","MAX_SAFE_INTEGER","Array2D","get","array","width","set","height","Array","DynamicProgrammingDiffing","compute","sequence1","sequence2","equalityScore","lcsLengths","directions","lengths","s1","s2","horizontalLen","verticalLen","extendedSeqScore","getElement","newValue","prevLen","lastAligningPosS1","lastAligningPosS2","reportDecreasingAligningPositions","optimizeSequenceDiffs","sequenceDiffs","joinSequenceDiffs","shiftSequenceDiffs","smoothenSequenceDiffs","last","lastResult","cur","all","getBoundaryScore","diff","seq2PrevEndExclusive","seq2NextStart","shiftDiffToBetterPosition","seq1PrevEndExclusive","seq1NextStart","maxShiftLimit","deltaBefore","deltaAfter","bestDelta","bestScore","seq2OffsetStart","seq2OffsetEndExclusive","seq1Offset","score","MyersDiffAlgorithm","getXAfterSnake","FastInt32Array","paths","FastArrayNegativeIndices","SnakePath","loop","maxXofDLineTop","maxXofDLineLeft","newMaxX","lastPath","path","endX","endY","prev","idx","negativeArr","positiveArr","arr","Int32Array","LinesDiff","changes","LineRangeMapping","originalRange","modifiedRange","changedLineCount","innerChanges","RangeMapping","StandardLinesDiffComputer","computeDiff","originalLines","modifiedLines","options","maxComputationTimeMs","considerWhitespaceChanges","ignoreTrimWhitespace","perfectHashes","Map","getOrCreateHash","text","hash","size","srcDocLines","map","trim","tgtDocLines","LineSequence","lineAlignmentResult","dynamicProgrammingDiffing","offset1","offset2","log","myersDiffingAlgorithm","lineAlignments","alignments","scanForWhitespaceChanges","equalLinesCount","seq1LastStart","seq2Offset","seq2LastStart","characterDiffs","refineDiff","mappings","lineRangeMappingFromRangeMappings","sourceSlice","Slice","targetSlice","diffResult","coverFullWords","translateRange","additional","lastModifiedWord","maybePushWordToAdditional","originalLength1","s1Range","deleted","originalLength2","s2Range","added","count","processWord","s1Added","s2Added","changedS1","changedS2","w1Before","findWordContaining","w2Before","w1After","w2After","merged","mergeSequenceDiffs","sequenceDiffs1","sequenceDiffs2","sd1","sd2","shift","group","getLineRangeMapping","a1","a2","first","m1","m2","rangeMapping","lineStartDelta","lineEndDelta","originalLineRange","modifiedLineRange","shouldBeGrouped","currentGroup","item","trimmedHash","indentationBefore","getIndentation","lines","indentationAfter","str","charCodeAt","elements","fromCharCode","prevCategory","getCategory","nextCategory","LineBreakCR","LineBreakLF","WordUpper","getCategoryBoundaryScore","translateOffset","lineRange","firstCharOffsetByLineMinusOne","floor","offsetOfPrevLineBreak","offsetByLine","isWordChar","trimFirstLineFully","line","trimmedStartLine","trimStart","trimEnd","charCode","CharBoundaryCategory","WordLower","WordNumber","End","Other","category","isSpace","diffComputer","originalStartLineNumber","originalEndLineNumber","modifiedStartLineNumber","modifiedEndLineNumber","origStart","origEnd","editStart","editEnd","charChanges","originalStartColumn","originalEndColumn","modifiedStartColumn","modifiedEndColumn"],"sourceRoot":""}